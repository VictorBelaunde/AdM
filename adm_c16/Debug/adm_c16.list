
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004788  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa8  08004aa8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab0  08004ab0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007b4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000824  20000824  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000d796  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000101bd  00000000  00000000  0002d836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002021  00000000  00000000  0003d9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c58  00000000  00000000  0003fa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dc6c4  00000000  00000000  00040670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000b80  00000000  00000000  0011cd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024d26  00000000  00000000  0011d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001425de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b78  00000000  00000000  00142630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004920 	.word	0x08004920

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004920 	.word	0x08004920

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_zeros>:
@ Parametros recibidos:
@   r0: dirección de memoria de inicio del vector
@   r1: longitud
.thumb_func               @ Se avisa al emsablador que esta es una funcion
    asm_zeros:            @ Etiqueta/nombre de la función.
        mov r2, 0         @ r2 = 0
 80001f8:	f04f 0200 	mov.w	r2, #0

080001fc <asm_zeros_bucle>:
        asm_zeros_bucle:  @ Etiqueta de comienzo de bucle.
    str r2, [r0]          @ Asigna 0 a la palabra en dirección r0.
 80001fc:	6002      	str	r2, [r0, #0]
    add r0, 4             @ Pasa a la siguiente palabra/elemento en vector.
 80001fe:	f100 0004 	add.w	r0, r0, #4
    subs r1, 1            @ Resta 1 a la cantidad de elementos y actualiza flags de estado del procesador. En particular, estamos interesados en el flag Z.
 8000202:	3901      	subs	r1, #1
    bne asm_zeros_bucle   @ La instrucción se ejecuta mientras el resultado de r1 - 1 no sea cero (Z == 0).
 8000204:	d1fa      	bne.n	80001fc <asm_zeros_bucle>
    bx lr                 @ La instrucción de salto no se ejecutó porque Z == 1, volvemos a quién nos llamó.
 8000206:	4770      	bx	lr

08000208 <asm_productoEscalar32>:
@	r4: i
@	r5: j variable auxiliar para contar las veces que sumo
@	r6: registro auxiliar
.thumb_func               				@ Se avisa al emsablador que esta es una funcion
    asm_productoEscalar32: 				@ Etiqueta/nombre de la función.
        push {r4-r6}					@ preservo los valores de los registros auxiliares en orden. (por seguridad)
 8000208:	b470      	push	{r4, r5, r6}
        mov r4, 0         				@ r4 = 0 es la variable i
 800020a:	f04f 0400 	mov.w	r4, #0

0800020e <asm_escalar32_bucle>:
        asm_escalar32_bucle:  			@ Etiqueta de comienzo de bucle.
    		cmp r4,r2					@ Comparo i con longitud
 800020e:	4294      	cmp	r4, r2
    		bge exit_loop				@ si r4 es mayor o igual que r6 salto a la etiqueta exit_loop
 8000210:	da09      	bge.n	8000226 <exit_loop>
    		mov r5, 0					@ r5 es para contar las veces que sumo (multiplicación)
 8000212:	f04f 0500 	mov.w	r5, #0

08000216 <multiplica_bucle>:
    		multiplica_bucle:
    			cmp r5, r3
 8000216:	429d      	cmp	r5, r3
    			bge exit_multiplica
 8000218:	da05      	bge.n	8000226 <exit_loop>
    			ldr r6,[r0]				@ carga  r6(registro auxiliar) el contenido de vectorIn.
 800021a:	6806      	ldr	r6, [r0, #0]
    			add r6, r6				@ La multiplicación en SI
 800021c:	4436      	add	r6, r6
    			add r0, 4               @ Pasa a la siguiente palabra/elemento en vector.
 800021e:	f100 0004 	add.w	r0, r0, #4
    			adds r5, 1				@ incremento j (interna del loop for)
 8000222:	3501      	adds	r5, #1
    			bne multiplica_bucle
 8000224:	d1f7      	bne.n	8000216 <multiplica_bucle>

08000226 <exit_loop>:
    			exit_multiplica:
    		exit_loop:
    		str r6, [r1]				@ cargo en memoria (vectorOut) el resultado de la multiplicacion
 8000226:	600e      	str	r6, [r1, #0]
    		add r1, 4               	@ Pasa a la siguiente palabra/elemento en vector.
 8000228:	f101 0104 	add.w	r1, r1, #4
    		adds r4, 1					@ incremento i
 800022c:	3401      	adds	r4, #1
    		bne asm_escalar32_bucle
 800022e:	d1ee      	bne.n	800020e <asm_escalar32_bucle>
    		pop {r4-r6}					@ devuelvo los valores originales de los registros
 8000230:	bc70      	pop	{r4, r5, r6}
    	bx lr                		@ La instrucción de salto no se ejecutó porque N == V, volvemos a quién nos llamó.
 8000232:	4770      	bx	lr

08000234 <asm_productoEscalar16>:
@	r4: registro para guardar el resultado de la multiplicación


.thumb_func               				@ Se avisa al emsablador que esta es una funcion
    asm_productoEscalar16:
    		push {r4}					@ Guarda el registro en la memoria para no pisar la info. Eje push {r4-r6} guarda los 3 reg.
 8000234:	b410      	push	{r4}

08000236 <multiplica16_bucle>:
    		multiplica16_bucle:
    			ldrh r4, [r0], #2		@ Carga r4 con el vectorIn y suma 2 posiciones el sp(16bit)
 8000236:	f830 4b02 	ldrh.w	r4, [r0], #2
    			mul r4, r3				@ Utilizo la instruccion mul que multiplica y actuliza r4
 800023a:	fb03 f404 	mul.w	r4, r3, r4
    			strh r4, [r1], #2		@ Cargo en moria el resultado de r4 y actualiza el sp de r1(16bit)
 800023e:	f821 4b02 	strh.w	r4, [r1], #2
    			subs r2, 1				@ Resto 1 al contenido de r2
 8000242:	3a01      	subs	r2, #1
    			bne multiplica16_bucle
 8000244:	d1f7      	bne.n	8000236 <multiplica16_bucle>
    		pop {r4}					@ Restablesco el valor de r4 original que tenia antes de entrar a la función
 8000246:	bc10      	pop	{r4}
    		bx lr
 8000248:	4770      	bx	lr

0800024a <asm_productoEscalar12>:
@   r3: escalar
@ Variables
@	r4: registro para guardar el resultado intermedio
.thumb_func
	asm_productoEscalar12:
		push {r4}				@ Guarda el registro en la memoria para no pisar la info
 800024a:	b410      	push	{r4}

0800024c <multiplica12_bucle>:
		multiplica12_bucle:
			ldrh r4, [r0], #2	@ Guardo en r4 los primeros 16bit de r0 y suma 2 posiciones
 800024c:	f830 4b02 	ldrh.w	r4, [r0], #2
			mul r4, r3			@ Multiplica r4 con el escalar y actualiza r4
 8000250:	fb03 f404 	mul.w	r4, r3, r4
			usat r4, #12, r4	@ Uso la instruccion "usat" para saturar a 12bit y lo guardo en r4. Eje USAT <Rd>,#,<Rn>
 8000254:	f384 040c 	usat	r4, #12, r4
			strh r4, [r1], #2	@ Cargo en memoria el resultado de r4 y actualiza el sp de r1(16bit)
 8000258:	f821 4b02 	strh.w	r4, [r1], #2
			subs r2, 1			@ Resto 1 al contenido de r2
 800025c:	3a01      	subs	r2, #1
			bne multiplica12_bucle
 800025e:	d1f5      	bne.n	800024c <multiplica12_bucle>
		pop {r4}
 8000260:	bc10      	pop	{r4}
		bx lr
 8000262:	4770      	bx	lr

08000264 <asm_filtroVentana10>:
@	r8: contador de samples
@	r9: auxiliar para r2

.thumb_func
	asm_filtroVentana10:
		push {r3-r9}
 8000264:	e92d 03f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9}
		mov r3, 0							@ Inicializar i
 8000268:	f04f 0300 	mov.w	r3, #0
		mov r9, r2
 800026c:	4691      	mov	r9, r2

0800026e <asm_filtroVentana10_bucle>:
		asm_filtroVentana10_bucle:
		mov r4, 5							@ Inicializa x en 5
 800026e:	f04f 0405 	mov.w	r4, #5
		mov r6, 0
 8000272:	f04f 0600 	mov.w	r6, #0
		mov r7, 0
 8000276:	f04f 0700 	mov.w	r7, #0
		mov r8, 0
 800027a:	f04f 0800 	mov.w	r8, #0

0800027e <asm_filtroVentana10_bucle_a>:
		asm_filtroVentana10_bucle_a:		@ Bucle a para la ventana del filtro
			subs r5, r3, r4					@ controlo si salgo de rango
 800027e:	1b1d      	subs	r5, r3, r4
			lsl r5, 1						@ Multiplico por 2 para desplazar  2 bytes
 8000280:	ea4f 0545 	mov.w	r5, r5, lsl #1
			ITTT PL							@ Controlo i es positivo o igaul a 0
 8000284:	bf5e      	ittt	pl
			ldrhPL r6, [r0, r5]				@ Leo el índice correspondiente de r0
 8000286:	5b46      	ldrhpl	r6, [r0, r5]
			addPL r7, r6					@ Acumulo el valor parte alta
 8000288:	19bf      	addpl	r7, r7, r6
			addPL r8, 1						@ Sumo un sample
 800028a:	f108 0801 	addpl.w	r8, r8, #1
			subs r4, 1
 800028e:	3c01      	subs	r4, #1
		bne asm_filtroVentana10_bucle_a
 8000290:	d1f5      	bne.n	800027e <asm_filtroVentana10_bucle_a>
		mov r4, 5							@ actualizo en 5 a x
 8000292:	f04f 0405 	mov.w	r4, #5

08000296 <asm_filtroVentana10_bucle_b>:
		asm_filtroVentana10_bucle_b:
			add r5, r3, r4					@ controlo si salgo de rango
 8000296:	eb03 0504 	add.w	r5, r3, r4
			cmp r9, r5						@ Comparo con el límite superior del vector
 800029a:	45a9      	cmp	r9, r5
			lsl r5, 1						@ Multiplico por 2 para desplazar  2 bytes
 800029c:	ea4f 0545 	mov.w	r5, r5, lsl #1
			ITTT hi							@ Controlo i es positivo o igaul a 0
 80002a0:	bf82      	ittt	hi
				ldrhhi r6, [r0, r5]			@ Leo el índice correspondiente de r0
 80002a2:	5b46      	ldrhhi	r6, [r0, r5]
				addhi r7, r6				@ Acumulo el valor parte alta
 80002a4:	19bf      	addhi	r7, r7, r6
				addhi r8, 1					@ Sumo un sample
 80002a6:	f108 0801 	addhi.w	r8, r8, #1
			subs r4, 1
 80002aa:	3c01      	subs	r4, #1
		bne asm_filtroVentana10_bucle_b
 80002ac:	d1f3      	bne.n	8000296 <asm_filtroVentana10_bucle_b>
		udiv r7, r7, r8
 80002ae:	fbb7 f7f8 	udiv	r7, r7, r8
		strh r7, [r1, r3]
 80002b2:	52cf      	strh	r7, [r1, r3]
		add r3, 1							@ Sumo uno a i
 80002b4:	f103 0301 	add.w	r3, r3, #1
		subs r2, 1
 80002b8:	3a01      	subs	r2, #1
		bne asm_filtroVentana10_bucle
 80002ba:	d1d8      	bne.n	800026e <asm_filtroVentana10_bucle>
		pop {r3-r9}
 80002bc:	e8bd 03f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9}
		bx lr
 80002c0:	4770      	bx	lr

080002c2 <asm_pack32to16>:
@	r2: longitud
@ Variables
@	r3: registro para guardar el corrimiento de posiciones a 16bits
.thumb_func
	asm_pack32to16:
		push {r3}					@ Resguardo el valor de r3 en la pila
 80002c2:	b408      	push	{r3}

080002c4 <pack32to16_bucle>:
		pack32to16_bucle:
			ldr r3, [r0], #4		@ Cargo en r3 el vectorIn y actualizo posicion 4 lugares
 80002c4:	f850 3b04 	ldr.w	r3, [r0], #4
			lsr r3, r3, 16			@ Shifteo el valor de r3 en 16 posiciones
 80002c8:	ea4f 4313 	mov.w	r3, r3, lsr #16
			str r3, [r1], #2		@ Cargo en memoria y actualizo posicion en 2 lugares
 80002cc:	f841 3b02 	str.w	r3, [r1], #2
			subs r2, 1				@ resto en 1 el registro de longitud
 80002d0:	3a01      	subs	r2, #1
			bne pack32to16_bucle
 80002d2:	d1f7      	bne.n	80002c4 <pack32to16_bucle>
		pop {r3}
 80002d4:	bc08      	pop	{r3}
		bx lr
 80002d6:	4770      	bx	lr

080002d8 <asm_max>:
@	r3: resitro para cargar posicion max
@	r4: registro contador de posicion
@	r5: registro auxiliar
.thumb_func
	asm_max:
		push {r2-r5}
 80002d8:	b43c      	push	{r2, r3, r4, r5}
		mov r2, 0
 80002da:	f04f 0200 	mov.w	r2, #0
		mov r3, 0
 80002de:	f04f 0300 	mov.w	r3, #0
		mov r4, 0
 80002e2:	f04f 0400 	mov.w	r4, #0

080002e6 <asm_max_bucle>:
		asm_max_bucle:
			ldr r5, [r0]
 80002e6:	6805      	ldr	r5, [r0, #0]
			cmp r5, r2
 80002e8:	4295      	cmp	r5, r2
			bgt salta_if		@ Salta las siguientes 2 lineas si r5 es mayor que r2
 80002ea:	dc01      	bgt.n	80002f0 <salta_if>
			mov r2, r4			@ Gaurado los valores nuevos
 80002ec:	4622      	mov	r2, r4
			mov r3, r1
 80002ee:	460b      	mov	r3, r1

080002f0 <salta_if>:
			salta_if:
			add r4, 1
 80002f0:	f104 0401 	add.w	r4, r4, #1
			subs r1, 1
 80002f4:	3901      	subs	r1, #1
			bne asm_max_bucle
 80002f6:	d1f6      	bne.n	80002e6 <asm_max_bucle>
		pop {r2-r5}
 80002f8:	bc3c      	pop	{r2, r3, r4, r5}
		bx lr
 80002fa:	4770      	bx	lr

080002fc <asm_downsampleM>:
@	r5: resitro para variable N


.thumb_func
	asm_downsampleM:
		push {r4-r5}				 	@ Resguardo valores de los registros en la pila
 80002fc:	b430      	push	{r4, r5}
		mov r5, 0						@ Inicializo r5
 80002fe:	f04f 0500 	mov.w	r5, #0

08000302 <asm_downsampleM_bucle>:
		asm_downsampleM_bucle:
			add r5, 1					@ Sumo 1 para comenzar con el elemento a leer
 8000302:	f105 0501 	add.w	r5, r5, #1
			ldr r4, [r0], #4			@ Cargo el vectorIn y me desplazo una posición 32bit
 8000306:	f850 4b04 	ldr.w	r4, [r0], #4
			cmp r5, r3					@ Comparo r5 con la variable N (elemento a descartar)
 800030a:	429d      	cmp	r5, r3
			ite eq						@ Si la operacion anterior es igual
 800030c:	bf0c      	ite	eq
				moveq r5, 0				@ Si es igual pongo a 0 el registro r5
 800030e:	2500      	moveq	r5, #0
				strne r4, [r1], #4		@ Si no es igual copio el valor en el vectorOut y me desplazo una posición
 8000310:	f841 4b04 	strne.w	r4, [r1], #4
			subs r2, 1					@ Resto en 1 el registro de longitud actualizo con S para actualizar flags
 8000314:	3a01      	subs	r2, #1
			bne asm_downsampleM_bucle
 8000316:	d1f4      	bne.n	8000302 <asm_downsampleM_bucle>
		pop {r4-r5}						@ Antes de salir recupero los valores iniciales de los registros
 8000318:	bc30      	pop	{r4, r5}
		bx lr							@ Vuelvo a la dirección donde se invocó a la función
 800031a:	4770      	bx	lr

0800031c <asm_invertir>:
@	r4: variable auxiliar para valores inicio
@	r5: variable auxiliar para valores fin

.thumb_func
	asm_invertir:
		push {r2-r5}
 800031c:	b43c      	push	{r2, r3, r4, r5}
		mov r2, 2					@ Cargo el valor INICIO para usarlo en la inicialización de r3
 800031e:	f04f 0202 	mov.w	r2, #2
		mov r3, r1					@ Cargo la cantidad de elementos qque tiene el vector
 8000322:	460b      	mov	r3, r1
		sub r3, 1					@ Cargo r3 con el elemento  FIN - 1
 8000324:	f1a3 0301 	sub.w	r3, r3, #1
		mul r3, r2					@ Obtengo los bytes a desplazarme en memoria para obtener el elementro FIN - 1
 8000328:	fb02 f303 	mul.w	r3, r2, r3
		mov r2, 0					@ Cargo r2 con 0 el primer elemento del vector
 800032c:	f04f 0200 	mov.w	r2, #0

08000330 <asm_invertir_bucle>:
		asm_invertir_bucle:
			ldrh r4, [r0, r2]		@ Cargo el elemento INICIO
 8000330:	5a84      	ldrh	r4, [r0, r2]
			ldrh r5, [r0, r3]		@ Cargo el elemento FIN
 8000332:	5ac5      	ldrh	r5, [r0, r3]
			strh r4, [r0, r3]		@ Traspaso los valores leidos en los elementos invertidos
 8000334:	52c4      	strh	r4, [r0, r3]
			strh r5, [r0, r2]		@ Traspaso los valores leidos en los elementos invertidos
 8000336:	5285      	strh	r5, [r0, r2]
			add r2, 2				@ Posiciono r2 en el elemento siguiente INICIO + 1
 8000338:	f102 0202 	add.w	r2, r2, #2
			sub r3, 2				@ Posiciono r3 en el elemento siguiente FIN - 1
 800033c:	f1a3 0302 	sub.w	r3, r3, #2
			cmp r3, r2				@ Comparo ambos elementos
 8000340:	4293      	cmp	r3, r2
			bgt	asm_invertir_bucle 	@ Si r3 es menor a r2 entonces continuo en el bucle
 8000342:	dcf5      	bgt.n	8000330 <asm_invertir_bucle>
		pop {r2-r5}					@ Antes de salir recupero los valores iniciales de los registros
 8000344:	bc3c      	pop	{r2, r3, r4, r5}
		bx lr
 8000346:	4770      	bx	lr
	...

08000350 <memchr>:
 8000350:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000354:	2a10      	cmp	r2, #16
 8000356:	db2b      	blt.n	80003b0 <memchr+0x60>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	d008      	beq.n	8000370 <memchr+0x20>
 800035e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000362:	3a01      	subs	r2, #1
 8000364:	428b      	cmp	r3, r1
 8000366:	d02d      	beq.n	80003c4 <memchr+0x74>
 8000368:	f010 0f07 	tst.w	r0, #7
 800036c:	b342      	cbz	r2, 80003c0 <memchr+0x70>
 800036e:	d1f6      	bne.n	800035e <memchr+0xe>
 8000370:	b4f0      	push	{r4, r5, r6, r7}
 8000372:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000376:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800037a:	f022 0407 	bic.w	r4, r2, #7
 800037e:	f07f 0700 	mvns.w	r7, #0
 8000382:	2300      	movs	r3, #0
 8000384:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000388:	3c08      	subs	r4, #8
 800038a:	ea85 0501 	eor.w	r5, r5, r1
 800038e:	ea86 0601 	eor.w	r6, r6, r1
 8000392:	fa85 f547 	uadd8	r5, r5, r7
 8000396:	faa3 f587 	sel	r5, r3, r7
 800039a:	fa86 f647 	uadd8	r6, r6, r7
 800039e:	faa5 f687 	sel	r6, r5, r7
 80003a2:	b98e      	cbnz	r6, 80003c8 <memchr+0x78>
 80003a4:	d1ee      	bne.n	8000384 <memchr+0x34>
 80003a6:	bcf0      	pop	{r4, r5, r6, r7}
 80003a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003ac:	f002 0207 	and.w	r2, r2, #7
 80003b0:	b132      	cbz	r2, 80003c0 <memchr+0x70>
 80003b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b6:	3a01      	subs	r2, #1
 80003b8:	ea83 0301 	eor.w	r3, r3, r1
 80003bc:	b113      	cbz	r3, 80003c4 <memchr+0x74>
 80003be:	d1f8      	bne.n	80003b2 <memchr+0x62>
 80003c0:	2000      	movs	r0, #0
 80003c2:	4770      	bx	lr
 80003c4:	3801      	subs	r0, #1
 80003c6:	4770      	bx	lr
 80003c8:	2d00      	cmp	r5, #0
 80003ca:	bf06      	itte	eq
 80003cc:	4635      	moveq	r5, r6
 80003ce:	3803      	subeq	r0, #3
 80003d0:	3807      	subne	r0, #7
 80003d2:	f015 0f01 	tst.w	r5, #1
 80003d6:	d107      	bne.n	80003e8 <memchr+0x98>
 80003d8:	3001      	adds	r0, #1
 80003da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003de:	bf02      	ittt	eq
 80003e0:	3001      	addeq	r0, #1
 80003e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003e6:	3001      	addeq	r0, #1
 80003e8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ea:	3801      	subs	r0, #1
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop

080003f0 <__aeabi_uldivmod>:
 80003f0:	b953      	cbnz	r3, 8000408 <__aeabi_uldivmod+0x18>
 80003f2:	b94a      	cbnz	r2, 8000408 <__aeabi_uldivmod+0x18>
 80003f4:	2900      	cmp	r1, #0
 80003f6:	bf08      	it	eq
 80003f8:	2800      	cmpeq	r0, #0
 80003fa:	bf1c      	itt	ne
 80003fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000400:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000404:	f000 b974 	b.w	80006f0 <__aeabi_idiv0>
 8000408:	f1ad 0c08 	sub.w	ip, sp, #8
 800040c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000410:	f000 f806 	bl	8000420 <__udivmoddi4>
 8000414:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000418:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800041c:	b004      	add	sp, #16
 800041e:	4770      	bx	lr

08000420 <__udivmoddi4>:
 8000420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000424:	9d08      	ldr	r5, [sp, #32]
 8000426:	4604      	mov	r4, r0
 8000428:	468e      	mov	lr, r1
 800042a:	2b00      	cmp	r3, #0
 800042c:	d14d      	bne.n	80004ca <__udivmoddi4+0xaa>
 800042e:	428a      	cmp	r2, r1
 8000430:	4694      	mov	ip, r2
 8000432:	d969      	bls.n	8000508 <__udivmoddi4+0xe8>
 8000434:	fab2 f282 	clz	r2, r2
 8000438:	b152      	cbz	r2, 8000450 <__udivmoddi4+0x30>
 800043a:	fa01 f302 	lsl.w	r3, r1, r2
 800043e:	f1c2 0120 	rsb	r1, r2, #32
 8000442:	fa20 f101 	lsr.w	r1, r0, r1
 8000446:	fa0c fc02 	lsl.w	ip, ip, r2
 800044a:	ea41 0e03 	orr.w	lr, r1, r3
 800044e:	4094      	lsls	r4, r2
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	0c21      	lsrs	r1, r4, #16
 8000456:	fbbe f6f8 	udiv	r6, lr, r8
 800045a:	fa1f f78c 	uxth.w	r7, ip
 800045e:	fb08 e316 	mls	r3, r8, r6, lr
 8000462:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000466:	fb06 f107 	mul.w	r1, r6, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x64>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000476:	f080 811f 	bcs.w	80006b8 <__udivmoddi4+0x298>
 800047a:	4299      	cmp	r1, r3
 800047c:	f240 811c 	bls.w	80006b8 <__udivmoddi4+0x298>
 8000480:	3e02      	subs	r6, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb00 f707 	mul.w	r7, r0, r7
 8000498:	42a7      	cmp	r7, r4
 800049a:	d90a      	bls.n	80004b2 <__udivmoddi4+0x92>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a4:	f080 810a 	bcs.w	80006bc <__udivmoddi4+0x29c>
 80004a8:	42a7      	cmp	r7, r4
 80004aa:	f240 8107 	bls.w	80006bc <__udivmoddi4+0x29c>
 80004ae:	4464      	add	r4, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004b6:	1be4      	subs	r4, r4, r7
 80004b8:	2600      	movs	r6, #0
 80004ba:	b11d      	cbz	r5, 80004c4 <__udivmoddi4+0xa4>
 80004bc:	40d4      	lsrs	r4, r2
 80004be:	2300      	movs	r3, #0
 80004c0:	e9c5 4300 	strd	r4, r3, [r5]
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d909      	bls.n	80004e2 <__udivmoddi4+0xc2>
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	f000 80ef 	beq.w	80006b2 <__udivmoddi4+0x292>
 80004d4:	2600      	movs	r6, #0
 80004d6:	e9c5 0100 	strd	r0, r1, [r5]
 80004da:	4630      	mov	r0, r6
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	fab3 f683 	clz	r6, r3
 80004e6:	2e00      	cmp	r6, #0
 80004e8:	d14a      	bne.n	8000580 <__udivmoddi4+0x160>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d302      	bcc.n	80004f4 <__udivmoddi4+0xd4>
 80004ee:	4282      	cmp	r2, r0
 80004f0:	f200 80f9 	bhi.w	80006e6 <__udivmoddi4+0x2c6>
 80004f4:	1a84      	subs	r4, r0, r2
 80004f6:	eb61 0303 	sbc.w	r3, r1, r3
 80004fa:	2001      	movs	r0, #1
 80004fc:	469e      	mov	lr, r3
 80004fe:	2d00      	cmp	r5, #0
 8000500:	d0e0      	beq.n	80004c4 <__udivmoddi4+0xa4>
 8000502:	e9c5 4e00 	strd	r4, lr, [r5]
 8000506:	e7dd      	b.n	80004c4 <__udivmoddi4+0xa4>
 8000508:	b902      	cbnz	r2, 800050c <__udivmoddi4+0xec>
 800050a:	deff      	udf	#255	; 0xff
 800050c:	fab2 f282 	clz	r2, r2
 8000510:	2a00      	cmp	r2, #0
 8000512:	f040 8092 	bne.w	800063a <__udivmoddi4+0x21a>
 8000516:	eba1 010c 	sub.w	r1, r1, ip
 800051a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800051e:	fa1f fe8c 	uxth.w	lr, ip
 8000522:	2601      	movs	r6, #1
 8000524:	0c20      	lsrs	r0, r4, #16
 8000526:	fbb1 f3f7 	udiv	r3, r1, r7
 800052a:	fb07 1113 	mls	r1, r7, r3, r1
 800052e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000532:	fb0e f003 	mul.w	r0, lr, r3
 8000536:	4288      	cmp	r0, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x12c>
 800053a:	eb1c 0101 	adds.w	r1, ip, r1
 800053e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000542:	d202      	bcs.n	800054a <__udivmoddi4+0x12a>
 8000544:	4288      	cmp	r0, r1
 8000546:	f200 80cb 	bhi.w	80006e0 <__udivmoddi4+0x2c0>
 800054a:	4643      	mov	r3, r8
 800054c:	1a09      	subs	r1, r1, r0
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb1 f0f7 	udiv	r0, r1, r7
 8000554:	fb07 1110 	mls	r1, r7, r0, r1
 8000558:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800055c:	fb0e fe00 	mul.w	lr, lr, r0
 8000560:	45a6      	cmp	lr, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x156>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800056c:	d202      	bcs.n	8000574 <__udivmoddi4+0x154>
 800056e:	45a6      	cmp	lr, r4
 8000570:	f200 80bb 	bhi.w	80006ea <__udivmoddi4+0x2ca>
 8000574:	4608      	mov	r0, r1
 8000576:	eba4 040e 	sub.w	r4, r4, lr
 800057a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800057e:	e79c      	b.n	80004ba <__udivmoddi4+0x9a>
 8000580:	f1c6 0720 	rsb	r7, r6, #32
 8000584:	40b3      	lsls	r3, r6
 8000586:	fa22 fc07 	lsr.w	ip, r2, r7
 800058a:	ea4c 0c03 	orr.w	ip, ip, r3
 800058e:	fa20 f407 	lsr.w	r4, r0, r7
 8000592:	fa01 f306 	lsl.w	r3, r1, r6
 8000596:	431c      	orrs	r4, r3
 8000598:	40f9      	lsrs	r1, r7
 800059a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800059e:	fa00 f306 	lsl.w	r3, r0, r6
 80005a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80005a6:	0c20      	lsrs	r0, r4, #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fb09 1118 	mls	r1, r9, r8, r1
 80005b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005b4:	fb08 f00e 	mul.w	r0, r8, lr
 80005b8:	4288      	cmp	r0, r1
 80005ba:	fa02 f206 	lsl.w	r2, r2, r6
 80005be:	d90b      	bls.n	80005d8 <__udivmoddi4+0x1b8>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80005c8:	f080 8088 	bcs.w	80006dc <__udivmoddi4+0x2bc>
 80005cc:	4288      	cmp	r0, r1
 80005ce:	f240 8085 	bls.w	80006dc <__udivmoddi4+0x2bc>
 80005d2:	f1a8 0802 	sub.w	r8, r8, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1a09      	subs	r1, r1, r0
 80005da:	b2a4      	uxth	r4, r4
 80005dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80005e0:	fb09 1110 	mls	r1, r9, r0, r1
 80005e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ec:	458e      	cmp	lr, r1
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x1e2>
 80005f0:	eb1c 0101 	adds.w	r1, ip, r1
 80005f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005f8:	d26c      	bcs.n	80006d4 <__udivmoddi4+0x2b4>
 80005fa:	458e      	cmp	lr, r1
 80005fc:	d96a      	bls.n	80006d4 <__udivmoddi4+0x2b4>
 80005fe:	3802      	subs	r0, #2
 8000600:	4461      	add	r1, ip
 8000602:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000606:	fba0 9402 	umull	r9, r4, r0, r2
 800060a:	eba1 010e 	sub.w	r1, r1, lr
 800060e:	42a1      	cmp	r1, r4
 8000610:	46c8      	mov	r8, r9
 8000612:	46a6      	mov	lr, r4
 8000614:	d356      	bcc.n	80006c4 <__udivmoddi4+0x2a4>
 8000616:	d053      	beq.n	80006c0 <__udivmoddi4+0x2a0>
 8000618:	b15d      	cbz	r5, 8000632 <__udivmoddi4+0x212>
 800061a:	ebb3 0208 	subs.w	r2, r3, r8
 800061e:	eb61 010e 	sbc.w	r1, r1, lr
 8000622:	fa01 f707 	lsl.w	r7, r1, r7
 8000626:	fa22 f306 	lsr.w	r3, r2, r6
 800062a:	40f1      	lsrs	r1, r6
 800062c:	431f      	orrs	r7, r3
 800062e:	e9c5 7100 	strd	r7, r1, [r5]
 8000632:	2600      	movs	r6, #0
 8000634:	4631      	mov	r1, r6
 8000636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	40d8      	lsrs	r0, r3
 8000640:	fa0c fc02 	lsl.w	ip, ip, r2
 8000644:	fa21 f303 	lsr.w	r3, r1, r3
 8000648:	4091      	lsls	r1, r2
 800064a:	4301      	orrs	r1, r0
 800064c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000650:	fa1f fe8c 	uxth.w	lr, ip
 8000654:	fbb3 f0f7 	udiv	r0, r3, r7
 8000658:	fb07 3610 	mls	r6, r7, r0, r3
 800065c:	0c0b      	lsrs	r3, r1, #16
 800065e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000662:	fb00 f60e 	mul.w	r6, r0, lr
 8000666:	429e      	cmp	r6, r3
 8000668:	fa04 f402 	lsl.w	r4, r4, r2
 800066c:	d908      	bls.n	8000680 <__udivmoddi4+0x260>
 800066e:	eb1c 0303 	adds.w	r3, ip, r3
 8000672:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000676:	d22f      	bcs.n	80006d8 <__udivmoddi4+0x2b8>
 8000678:	429e      	cmp	r6, r3
 800067a:	d92d      	bls.n	80006d8 <__udivmoddi4+0x2b8>
 800067c:	3802      	subs	r0, #2
 800067e:	4463      	add	r3, ip
 8000680:	1b9b      	subs	r3, r3, r6
 8000682:	b289      	uxth	r1, r1
 8000684:	fbb3 f6f7 	udiv	r6, r3, r7
 8000688:	fb07 3316 	mls	r3, r7, r6, r3
 800068c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000690:	fb06 f30e 	mul.w	r3, r6, lr
 8000694:	428b      	cmp	r3, r1
 8000696:	d908      	bls.n	80006aa <__udivmoddi4+0x28a>
 8000698:	eb1c 0101 	adds.w	r1, ip, r1
 800069c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80006a0:	d216      	bcs.n	80006d0 <__udivmoddi4+0x2b0>
 80006a2:	428b      	cmp	r3, r1
 80006a4:	d914      	bls.n	80006d0 <__udivmoddi4+0x2b0>
 80006a6:	3e02      	subs	r6, #2
 80006a8:	4461      	add	r1, ip
 80006aa:	1ac9      	subs	r1, r1, r3
 80006ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006b0:	e738      	b.n	8000524 <__udivmoddi4+0x104>
 80006b2:	462e      	mov	r6, r5
 80006b4:	4628      	mov	r0, r5
 80006b6:	e705      	b.n	80004c4 <__udivmoddi4+0xa4>
 80006b8:	4606      	mov	r6, r0
 80006ba:	e6e3      	b.n	8000484 <__udivmoddi4+0x64>
 80006bc:	4618      	mov	r0, r3
 80006be:	e6f8      	b.n	80004b2 <__udivmoddi4+0x92>
 80006c0:	454b      	cmp	r3, r9
 80006c2:	d2a9      	bcs.n	8000618 <__udivmoddi4+0x1f8>
 80006c4:	ebb9 0802 	subs.w	r8, r9, r2
 80006c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006cc:	3801      	subs	r0, #1
 80006ce:	e7a3      	b.n	8000618 <__udivmoddi4+0x1f8>
 80006d0:	4646      	mov	r6, r8
 80006d2:	e7ea      	b.n	80006aa <__udivmoddi4+0x28a>
 80006d4:	4620      	mov	r0, r4
 80006d6:	e794      	b.n	8000602 <__udivmoddi4+0x1e2>
 80006d8:	4640      	mov	r0, r8
 80006da:	e7d1      	b.n	8000680 <__udivmoddi4+0x260>
 80006dc:	46d0      	mov	r8, sl
 80006de:	e77b      	b.n	80005d8 <__udivmoddi4+0x1b8>
 80006e0:	3b02      	subs	r3, #2
 80006e2:	4461      	add	r1, ip
 80006e4:	e732      	b.n	800054c <__udivmoddi4+0x12c>
 80006e6:	4630      	mov	r0, r6
 80006e8:	e709      	b.n	80004fe <__udivmoddi4+0xde>
 80006ea:	4464      	add	r4, ip
 80006ec:	3802      	subs	r0, #2
 80006ee:	e742      	b.n	8000576 <__udivmoddi4+0x156>

080006f0 <__aeabi_idiv0>:
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop

080006f4 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar (int ch)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit (&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006fc:	1d39      	adds	r1, r7, #4
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000702:	2201      	movs	r2, #1
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <__io_putchar+0x20>)
 8000706:	f002 fac0 	bl	8002c8a <HAL_UART_Transmit>
    return ch;
 800070a:	687b      	ldr	r3, [r7, #4]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200002b4 	.word	0x200002b4

08000718 <productoEscalar12>:
 Autor: Victor Belaunde
 Brief: Adaptar el ejercicio 3 para saturar el resultado del producto a 12 bits:
 return: none
 */
void productoEscalar12 (uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud, uint16_t escalar)
{
 8000718:	b480      	push	{r7}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	807b      	strh	r3, [r7, #2]
	for (uint32_t i=0; i<longitud; i++) {
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	e024      	b.n	8000776 <productoEscalar12+0x5e>
		if (vectorIn[i] * escalar > 4096)
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	4413      	add	r3, r2
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	887b      	ldrh	r3, [r7, #2]
 800073a:	fb02 f303 	mul.w	r3, r2, r3
 800073e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000742:	dd07      	ble.n	8000754 <productoEscalar12+0x3c>
		{
			vectorOut[i] = 4095; // (2 elevado a la 12) - 1
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	4413      	add	r3, r2
 800074c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000750:	801a      	strh	r2, [r3, #0]
 8000752:	e00d      	b.n	8000770 <productoEscalar12+0x58>
		}
		else{
			vectorOut[i] = vectorIn[i] * escalar;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	4413      	add	r3, r2
 800075c:	881a      	ldrh	r2, [r3, #0]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	68b9      	ldr	r1, [r7, #8]
 8000764:	440b      	add	r3, r1
 8000766:	8879      	ldrh	r1, [r7, #2]
 8000768:	fb11 f202 	smulbb	r2, r1, r2
 800076c:	b292      	uxth	r2, r2
 800076e:	801a      	strh	r2, [r3, #0]
	for (uint32_t i=0; i<longitud; i++) {
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	3301      	adds	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	429a      	cmp	r2, r3
 800077c:	d3d6      	bcc.n	800072c <productoEscalar12+0x14>
		}
	}
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	371c      	adds	r7, #28
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <filtroVentana10>:
 Brief: Funcioón que implementa un filtro de ventana movil de 10 valores
 	 	sobre un vector de muestra y carga un segundo con el promedio de esos 10 valores
 return: none
 */
void filtroVentana10(uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitudVectorIn)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
	uint32_t sumaTotal = 0; //La utiliza para acumular los valores del vector
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
	uint8_t cuentaElementos = 0; //Lo utilizo para calcular el promedio
 800079c:	2300      	movs	r3, #0
 800079e:	76fb      	strb	r3, [r7, #27]
	uint8_t ventana = 5; //Si bien no debe ser un numero "magico", sino la mitad de la ventana de valores para recorrer X para adelante y X atras
 80007a0:	2305      	movs	r3, #5
 80007a2:	74bb      	strb	r3, [r7, #18]
	for (uint32_t i=0; i < longitudVectorIn; i++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	e03a      	b.n	8000820 <filtroVentana10+0x94>
	{
		cuentaElementos = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	76fb      	strb	r3, [r7, #27]
		for (uint8_t amplitud=1; amplitud <= ventana; amplitud++)
 80007ae:	2301      	movs	r3, #1
 80007b0:	74fb      	strb	r3, [r7, #19]
 80007b2:	e024      	b.n	80007fe <filtroVentana10+0x72>
		{
			if(longitudVectorIn >= (i + amplitud)) //chequeo que la amplitud de la ventana no supere la logitud del vector
 80007b4:	7cfa      	ldrb	r2, [r7, #19]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	4413      	add	r3, r2
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d30d      	bcc.n	80007dc <filtroVentana10+0x50>
			{
				sumaTotal = sumaTotal + vectorIn[i + amplitud];
 80007c0:	7cfa      	ldrb	r2, [r7, #19]
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	4413      	add	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	4413      	add	r3, r2
 80007d4:	61fb      	str	r3, [r7, #28]
				cuentaElementos++;
 80007d6:	7efb      	ldrb	r3, [r7, #27]
 80007d8:	3301      	adds	r3, #1
 80007da:	76fb      	strb	r3, [r7, #27]
			}
			if((i - amplitud) >= 0)
			{
				sumaTotal = sumaTotal + vectorIn[i - amplitud];
 80007dc:	7cfb      	ldrb	r3, [r7, #19]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	4413      	add	r3, r2
 80007f0:	61fb      	str	r3, [r7, #28]
				cuentaElementos++;
 80007f2:	7efb      	ldrb	r3, [r7, #27]
 80007f4:	3301      	adds	r3, #1
 80007f6:	76fb      	strb	r3, [r7, #27]
		for (uint8_t amplitud=1; amplitud <= ventana; amplitud++)
 80007f8:	7cfb      	ldrb	r3, [r7, #19]
 80007fa:	3301      	adds	r3, #1
 80007fc:	74fb      	strb	r3, [r7, #19]
 80007fe:	7cfa      	ldrb	r2, [r7, #19]
 8000800:	7cbb      	ldrb	r3, [r7, #18]
 8000802:	429a      	cmp	r2, r3
 8000804:	d9d6      	bls.n	80007b4 <filtroVentana10+0x28>
			}
		}
	vectorOut[i] = sumaTotal/cuentaElementos;
 8000806:	7efb      	ldrb	r3, [r7, #27]
 8000808:	69fa      	ldr	r2, [r7, #28]
 800080a:	fbb2 f1f3 	udiv	r1, r2, r3
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	4413      	add	r3, r2
 8000816:	b28a      	uxth	r2, r1
 8000818:	801a      	strh	r2, [r3, #0]
	for (uint32_t i=0; i < longitudVectorIn; i++)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3301      	adds	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697a      	ldr	r2, [r7, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	429a      	cmp	r2, r3
 8000826:	d3c0      	bcc.n	80007aa <filtroVentana10+0x1e>

	}
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <vector_eco>:
 Brief: Función que recibe un vector con valores de 16 bits (signados), que corresponden a muestras de audio.
 La función debe introducir un “eco” de la mitad de la amplitud de la muestra original a los x elementos del vector original.
*/

void vector_eco (int16_t * vectorIn, int16_t * vectorOut, uint16_t longitud, uint16_t inicio_eco)
{
 8000836:	b480      	push	{r7}
 8000838:	b087      	sub	sp, #28
 800083a:	af00      	add	r7, sp, #0
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	4611      	mov	r1, r2
 8000842:	461a      	mov	r2, r3
 8000844:	460b      	mov	r3, r1
 8000846:	80fb      	strh	r3, [r7, #6]
 8000848:	4613      	mov	r3, r2
 800084a:	80bb      	strh	r3, [r7, #4]
	uint16_t i;
	for (i = 0; i < longitud; i++)
 800084c:	2300      	movs	r3, #0
 800084e:	82fb      	strh	r3, [r7, #22]
 8000850:	e02e      	b.n	80008b0 <vector_eco+0x7a>
	{
		if (i >= inicio_eco)
 8000852:	8afa      	ldrh	r2, [r7, #22]
 8000854:	88bb      	ldrh	r3, [r7, #4]
 8000856:	429a      	cmp	r2, r3
 8000858:	d31c      	bcc.n	8000894 <vector_eco+0x5e>
		{
			vectorOut[i] = (vectorIn[i - inicio_eco] / 2) + vectorIn[i];
 800085a:	8afa      	ldrh	r2, [r7, #22]
 800085c:	88bb      	ldrh	r3, [r7, #4]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	4413      	add	r3, r2
 8000866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800086a:	0fda      	lsrs	r2, r3, #31
 800086c:	4413      	add	r3, r2
 800086e:	105b      	asrs	r3, r3, #1
 8000870:	b21b      	sxth	r3, r3
 8000872:	b29a      	uxth	r2, r3
 8000874:	8afb      	ldrh	r3, [r7, #22]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	68f9      	ldr	r1, [r7, #12]
 800087a:	440b      	add	r3, r1
 800087c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000880:	b29b      	uxth	r3, r3
 8000882:	4413      	add	r3, r2
 8000884:	b299      	uxth	r1, r3
 8000886:	8afb      	ldrh	r3, [r7, #22]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	4413      	add	r3, r2
 800088e:	b20a      	sxth	r2, r1
 8000890:	801a      	strh	r2, [r3, #0]
 8000892:	e00a      	b.n	80008aa <vector_eco+0x74>
		}
		else
		{
			vectorOut[i] = vectorIn[i];
 8000894:	8afb      	ldrh	r3, [r7, #22]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	441a      	add	r2, r3
 800089c:	8afb      	ldrh	r3, [r7, #22]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	440b      	add	r3, r1
 80008a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008a8:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < longitud; i++)
 80008aa:	8afb      	ldrh	r3, [r7, #22]
 80008ac:	3301      	adds	r3, #1
 80008ae:	82fb      	strh	r3, [r7, #22]
 80008b0:	8afa      	ldrh	r2, [r7, #22]
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d3cc      	bcc.n	8000852 <vector_eco+0x1c>
		}
	}
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	371c      	adds	r7, #28
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <PrivilegiosSVC>:


static void PrivilegiosSVC (void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b088      	sub	sp, #32
 80008ca:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80008cc:	f3ef 8314 	mrs	r3, CONTROL
 80008d0:	607b      	str	r3, [r7, #4]
  return(result);
 80008d2:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 80008d4:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	61fb      	str	r3, [r7, #28]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	f383 8814 	msr	CONTROL, r3
}
 80008e8:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80008ea:	f3ef 8314 	mrs	r3, CONTROL
 80008ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80008f0:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 80008f2:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f023 0301 	bic.w	r3, r3, #1
 80008fa:	61fb      	str	r3, [r7, #28]
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	f383 8814 	msr	CONTROL, r3
}
 8000906:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000908:	f3ef 8314 	mrs	r3, CONTROL
 800090c:	617b      	str	r3, [r7, #20]
  return(result);
 800090e:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 8000910:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8000912:	f7ff fc6d 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000916:	f3ef 8314 	mrs	r3, CONTROL
 800091a:	61bb      	str	r3, [r7, #24]
  return(result);
 800091c:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 800091e:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b5b0      	push	{r4, r5, r7, lr}
 800092a:	b0a4      	sub	sp, #144	; 0x90
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f000 fd55 	bl	80013dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f8e3 	bl	8000afc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // Activa contador de ciclos (iniciar una sola vez)
  DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos;
 8000936:	4b66      	ldr	r3, [pc, #408]	; (8000ad0 <main+0x1a8>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a65      	ldr	r2, [pc, #404]	; (8000ad0 <main+0x1a8>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f000 f9eb 	bl	8000d1c <MX_GPIO_Init>
  MX_ETH_Init();
 8000946:	f000 f943 	bl	8000bd0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800094a:	f000 f98f 	bl	8000c6c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800094e:	f000 f9b7 	bl	8000cc0 <MX_USB_OTG_FS_PCD_Init>
  /*
   EJERCICIO 1
   */
  //zeros(*vector, longitud);

  uint32_t vector[4] = { 4, 5, 6, 7 };    // Agregar vector de prueba
 8000952:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <main+0x1ac>)
 8000954:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000958:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t escalar = 10;
 800095e:	230a      	movs	r3, #10
 8000960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  uint32_t vectorIn[7] = {1,2,3,4,5,6,7};     // Vector para pruebas de 32bits
 8000964:	4b5c      	ldr	r3, [pc, #368]	; (8000ad8 <main+0x1b0>)
 8000966:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800096a:	461d      	mov	r5, r3
 800096c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000970:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uint32_t vectorOut[7] = {0,0,0,0,0,0,0};    // Vector para pruebas de 32bits
 8000978:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]
  uint16_t vectorIn16[7] = {1,2,3,4,5,6,7};   // Vector para pruebas de 16bits
 800098c:	4b53      	ldr	r3, [pc, #332]	; (8000adc <main+0x1b4>)
 800098e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000994:	c407      	stmia	r4!, {r0, r1, r2}
 8000996:	8023      	strh	r3, [r4, #0]
  uint16_t vectorOut16[7] = {0,0,0,0,0,0,0};  // Vector para pruebas de 16bits
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	819a      	strh	r2, [r3, #12]
  int16_t vectorIn16_i[7] = {1,2,3,4,5,6,7};   // Vector para pruebas de 16bits con signo
 80009a6:	4b4d      	ldr	r3, [pc, #308]	; (8000adc <main+0x1b4>)
 80009a8:	f107 0414 	add.w	r4, r7, #20
 80009ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ae:	c407      	stmia	r4!, {r0, r1, r2}
 80009b0:	8023      	strh	r3, [r4, #0]
  int16_t vectorOut16_i[7] = {0,0,0,0,0,0,0};  // Vector para pruebas de 16bits con signo
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	819a      	strh	r2, [r3, #12]


  PrivilegiosSVC ();
 80009be:	f7ff ff82 	bl	80008c6 <PrivilegiosSVC>

  printf("Comienzo de conteo ");
 80009c2:	4847      	ldr	r0, [pc, #284]	; (8000ae0 <main+0x1b8>)
 80009c4:	f003 fab8 	bl	8003f38 <iprintf>
  fflush( stdout );
 80009c8:	4b46      	ldr	r3, [pc, #280]	; (8000ae4 <main+0x1bc>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 f89a 	bl	8003b08 <fflush>

  volatile uint32_t Ciclos;

  // Medición funciones Escalar12
  DWT->CYCCNT = 0;
 80009d4:	4b3e      	ldr	r3, [pc, #248]	; (8000ad0 <main+0x1a8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  productoEscalar12 (vectorIn16, vectorOut16, 7, 10);
 80009da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80009de:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80009e2:	230a      	movs	r3, #10
 80009e4:	2207      	movs	r2, #7
 80009e6:	f7ff fe97 	bl	8000718 <productoEscalar12>
  // Obtiene cantidad de ciclos que demoró la función
  Ciclos = DWT->CYCCNT;
 80009ea:	4b39      	ldr	r3, [pc, #228]	; (8000ad0 <main+0x1a8>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	603b      	str	r3, [r7, #0]
  printf("Escalar12 C: %lu\r\n",Ciclos);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	4619      	mov	r1, r3
 80009f4:	483c      	ldr	r0, [pc, #240]	; (8000ae8 <main+0x1c0>)
 80009f6:	f003 fa9f 	bl	8003f38 <iprintf>
  fflush( stdout );
 80009fa:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <main+0x1bc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 f881 	bl	8003b08 <fflush>

  DWT->CYCCNT = 0;
 8000a06:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <main+0x1a8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  asm_productoEscalar12(vectorIn16, vectorOut16, 7, 10);
 8000a0c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a10:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000a14:	230a      	movs	r3, #10
 8000a16:	2207      	movs	r2, #7
 8000a18:	f7ff fc17 	bl	800024a <asm_productoEscalar12>
  // Obtiene cantidad de ciclos que demoró la función
   Ciclos = DWT->CYCCNT;
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <main+0x1a8>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	603b      	str	r3, [r7, #0]
  printf("Escalar12 Asm: %lu\r\n",Ciclos);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	4831      	ldr	r0, [pc, #196]	; (8000aec <main+0x1c4>)
 8000a28:	f003 fa86 	bl	8003f38 <iprintf>
  fflush( stdout );
 8000a2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <main+0x1bc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f003 f868 	bl	8003b08 <fflush>

  // Medición funciones Filtro Ventana
  DWT->CYCCNT = 0;
 8000a38:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <main+0x1a8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  filtroVentana10 (vectorIn16, vectorOut16, 7);
 8000a3e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a46:	2207      	movs	r2, #7
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fe9f 	bl	800078c <filtroVentana10>
  // Obtiene cantidad de ciclos que demoró la función
 Ciclos = DWT->CYCCNT;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <main+0x1a8>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	603b      	str	r3, [r7, #0]
 printf("FiltroVentana C: %lu\r\n",Ciclos);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4825      	ldr	r0, [pc, #148]	; (8000af0 <main+0x1c8>)
 8000a5a:	f003 fa6d 	bl	8003f38 <iprintf>
  fflush( stdout );
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <main+0x1bc>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 f84f 	bl	8003b08 <fflush>


   DWT->CYCCNT = 0;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <main+0x1a8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
   asm_filtroVentana10 (vectorIn16, vectorOut16, 7);
 8000a70:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a78:	2207      	movs	r2, #7
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fbf2 	bl	8000264 <asm_filtroVentana10>
   // Obtiene cantidad de ciclos que demoró la función
  Ciclos = DWT->CYCCNT;
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <main+0x1a8>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	603b      	str	r3, [r7, #0]
  printf("FiltroVentana Asm: %lu\r\n",Ciclos);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481a      	ldr	r0, [pc, #104]	; (8000af4 <main+0x1cc>)
 8000a8c:	f003 fa54 	bl	8003f38 <iprintf>
   fflush( stdout );
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <main+0x1bc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 f836 	bl	8003b08 <fflush>

   // Medición funciones Eco
   DWT->CYCCNT = 0;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <main+0x1a8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
   vector_eco(vectorIn16_i, vectorOut16_i, 7, 4);
 8000aa2:	1d39      	adds	r1, r7, #4
 8000aa4:	f107 0014 	add.w	r0, r7, #20
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	2207      	movs	r2, #7
 8000aac:	f7ff fec3 	bl	8000836 <vector_eco>
   // Obtiene cantidad de ciclos que demoró la función
  Ciclos = DWT->CYCCNT;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <main+0x1a8>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	603b      	str	r3, [r7, #0]
  printf("Eco C: %lu\r\n",Ciclos);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480f      	ldr	r0, [pc, #60]	; (8000af8 <main+0x1d0>)
 8000abc:	f003 fa3c 	bl	8003f38 <iprintf>
   fflush( stdout );
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <main+0x1bc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 f81e 	bl	8003b08 <fflush>
  //const uint32_t Resultado = asm_sum (5, 3);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <main+0x1a4>
 8000ace:	bf00      	nop
 8000ad0:	e0001000 	.word	0xe0001000
 8000ad4:	080049bc 	.word	0x080049bc
 8000ad8:	080049cc 	.word	0x080049cc
 8000adc:	080049e8 	.word	0x080049e8
 8000ae0:	08004938 	.word	0x08004938
 8000ae4:	2000000c 	.word	0x2000000c
 8000ae8:	0800494c 	.word	0x0800494c
 8000aec:	08004960 	.word	0x08004960
 8000af0:	08004978 	.word	0x08004978
 8000af4:	08004990 	.word	0x08004990
 8000af8:	080049ac 	.word	0x080049ac

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b094      	sub	sp, #80	; 0x50
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	f107 0320 	add.w	r3, r7, #32
 8000b06:	2230      	movs	r2, #48	; 0x30
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 f92b 	bl	8003d66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <SystemClock_Config+0xcc>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a27      	ldr	r2, [pc, #156]	; (8000bc8 <SystemClock_Config+0xcc>)
 8000b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <SystemClock_Config+0xcc>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <SystemClock_Config+0xd0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <SystemClock_Config+0xd0>)
 8000b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <SystemClock_Config+0xd0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b62:	2302      	movs	r3, #2
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b70:	23a8      	movs	r3, #168	; 0xa8
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fb9d 	bl	80022c0 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b8c:	f000 f974 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b94:	2302      	movs	r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2105      	movs	r1, #5
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fdfe 	bl	80027b0 <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bba:	f000 f95d 	bl	8000e78 <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3750      	adds	r7, #80	; 0x50
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_ETH_Init+0x84>)
 8000bd6:	4a20      	ldr	r2, [pc, #128]	; (8000c58 <MX_ETH_Init+0x88>)
 8000bd8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_ETH_Init+0x8c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_ETH_Init+0x8c>)
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_ETH_Init+0x8c>)
 8000be8:	22e1      	movs	r2, #225	; 0xe1
 8000bea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_ETH_Init+0x8c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_ETH_Init+0x8c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_ETH_Init+0x8c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_ETH_Init+0x84>)
 8000c00:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <MX_ETH_Init+0x8c>)
 8000c02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_ETH_Init+0x84>)
 8000c06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c0a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_ETH_Init+0x84>)
 8000c0e:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <MX_ETH_Init+0x90>)
 8000c10:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_ETH_Init+0x84>)
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <MX_ETH_Init+0x94>)
 8000c16:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_ETH_Init+0x84>)
 8000c1a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c1e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <MX_ETH_Init+0x84>)
 8000c22:	f000 fd57 	bl	80016d4 <HAL_ETH_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c2c:	f000 f924 	bl	8000e78 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c30:	2238      	movs	r2, #56	; 0x38
 8000c32:	2100      	movs	r1, #0
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <MX_ETH_Init+0x98>)
 8000c36:	f003 f896 	bl	8003d66 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_ETH_Init+0x98>)
 8000c3c:	2221      	movs	r2, #33	; 0x21
 8000c3e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_ETH_Init+0x98>)
 8000c42:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000c46:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <MX_ETH_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000204 	.word	0x20000204
 8000c58:	40028000 	.word	0x40028000
 8000c5c:	20000804 	.word	0x20000804
 8000c60:	20000164 	.word	0x20000164
 8000c64:	200000c4 	.word	0x200000c4
 8000c68:	2000008c 	.word	0x2000008c

08000c6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_USART3_UART_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_USART3_UART_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_USART3_UART_Init+0x4c>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_USART3_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_USART3_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_USART3_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_USART3_UART_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_USART3_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_USART3_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_USART3_UART_Init+0x4c>)
 8000ca4:	f001 ffa4 	bl	8002bf0 <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cae:	f000 f8e3 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200002b4 	.word	0x200002b4
 8000cbc:	40004800 	.word	0x40004800

08000cc0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d04:	f001 f9bf 	bl	8002086 <HAL_PCD_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d0e:	f000 f8b3 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200002f8 	.word	0x200002f8

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a4b      	ldr	r2, [pc, #300]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b49      	ldr	r3, [pc, #292]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	4b45      	ldr	r3, [pc, #276]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a44      	ldr	r2, [pc, #272]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b3e      	ldr	r3, [pc, #248]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a3d      	ldr	r2, [pc, #244]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b3b      	ldr	r3, [pc, #236]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a36      	ldr	r2, [pc, #216]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a2f      	ldr	r2, [pc, #188]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000dac:	f043 0308 	orr.w	r3, r3, #8
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a28      	ldr	r2, [pc, #160]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <MX_GPIO_Init+0x14c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000de0:	4822      	ldr	r0, [pc, #136]	; (8000e6c <MX_GPIO_Init+0x150>)
 8000de2:	f001 f937 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2140      	movs	r1, #64	; 0x40
 8000dea:	4821      	ldr	r0, [pc, #132]	; (8000e70 <MX_GPIO_Init+0x154>)
 8000dec:	f001 f932 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	481b      	ldr	r0, [pc, #108]	; (8000e74 <MX_GPIO_Init+0x158>)
 8000e08:	f000 ff78 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e0c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4811      	ldr	r0, [pc, #68]	; (8000e6c <MX_GPIO_Init+0x150>)
 8000e26:	f000 ff69 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e2a:	2340      	movs	r3, #64	; 0x40
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <MX_GPIO_Init+0x154>)
 8000e42:	f000 ff5b 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_GPIO_Init+0x154>)
 8000e5a:	f000 ff4f 	bl	8001cfc <HAL_GPIO_Init>

}
 8000e5e:	bf00      	nop
 8000e60:	3730      	adds	r7, #48	; 0x30
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40021800 	.word	0x40021800
 8000e74:	40020800 	.word	0x40020800

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <Error_Handler+0x8>
	...

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	; 0x38
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a55      	ldr	r2, [pc, #340]	; (8001048 <HAL_ETH_MspInit+0x174>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	f040 80a4 	bne.w	8001040 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
 8000efc:	4b53      	ldr	r3, [pc, #332]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	4a52      	ldr	r2, [pc, #328]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f06:	6313      	str	r3, [r2, #48]	; 0x30
 8000f08:	4b50      	ldr	r3, [pc, #320]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f10:	623b      	str	r3, [r7, #32]
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	4b4c      	ldr	r3, [pc, #304]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a4b      	ldr	r2, [pc, #300]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
 8000f24:	4b49      	ldr	r3, [pc, #292]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	4b45      	ldr	r3, [pc, #276]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	4a44      	ldr	r2, [pc, #272]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f40:	4b42      	ldr	r3, [pc, #264]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	4b3e      	ldr	r3, [pc, #248]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a3d      	ldr	r2, [pc, #244]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	4b37      	ldr	r3, [pc, #220]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a36      	ldr	r2, [pc, #216]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b34      	ldr	r3, [pc, #208]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a2f      	ldr	r2, [pc, #188]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	4a28      	ldr	r2, [pc, #160]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fae:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb0:	4b26      	ldr	r3, [pc, #152]	; (800104c <HAL_ETH_MspInit+0x178>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fbc:	2332      	movs	r3, #50	; 0x32
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fcc:	230b      	movs	r3, #11
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481e      	ldr	r0, [pc, #120]	; (8001050 <HAL_ETH_MspInit+0x17c>)
 8000fd8:	f000 fe90 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fdc:	2386      	movs	r3, #134	; 0x86
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fec:	230b      	movs	r3, #11
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4817      	ldr	r0, [pc, #92]	; (8001054 <HAL_ETH_MspInit+0x180>)
 8000ff8:	f000 fe80 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100e:	230b      	movs	r3, #11
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	480f      	ldr	r0, [pc, #60]	; (8001058 <HAL_ETH_MspInit+0x184>)
 800101a:	f000 fe6f 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800101e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001030:	230b      	movs	r3, #11
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	4808      	ldr	r0, [pc, #32]	; (800105c <HAL_ETH_MspInit+0x188>)
 800103c:	f000 fe5e 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3738      	adds	r7, #56	; 0x38
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40028000 	.word	0x40028000
 800104c:	40023800 	.word	0x40023800
 8001050:	40020800 	.word	0x40020800
 8001054:	40020000 	.word	0x40020000
 8001058:	40020400 	.word	0x40020400
 800105c:	40021800 	.word	0x40021800

08001060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0x84>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d12c      	bne.n	80010dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_UART_MspInit+0x88>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <HAL_UART_MspInit+0x88>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_UART_MspInit+0x88>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_UART_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_UART_MspInit+0x88>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_UART_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010cc:	2307      	movs	r3, #7
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <HAL_UART_MspInit+0x8c>)
 80010d8:	f000 fe10 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40004800 	.word	0x40004800
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020c00 	.word	0x40020c00

080010f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001110:	d13f      	bne.n	8001192 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_PCD_MspInit+0xac>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a20      	ldr	r2, [pc, #128]	; (800119c <HAL_PCD_MspInit+0xac>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_PCD_MspInit+0xac>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800112e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001140:	230a      	movs	r3, #10
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <HAL_PCD_MspInit+0xb0>)
 800114c:	f000 fdd6 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	480e      	ldr	r0, [pc, #56]	; (80011a0 <HAL_PCD_MspInit+0xb0>)
 8001166:	f000 fdc9 	bl	8001cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_PCD_MspInit+0xac>)
 800116c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <HAL_PCD_MspInit+0xac>)
 8001170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001174:	6353      	str	r3, [r2, #52]	; 0x34
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_PCD_MspInit+0xac>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_PCD_MspInit+0xac>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_PCD_MspInit+0xac>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80011c8:	f3ef 8314 	mrs	r3, CONTROL
 80011cc:	607b      	str	r3, [r7, #4]
  return(result);
 80011ce:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 80011d0:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f383 8814 	msr	CONTROL, r3
}
 80011e4:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001212:	f000 f935 	bl	8001480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}

0800121a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	e00a      	b.n	8001242 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800122c:	f3af 8000 	nop.w
 8001230:	4601      	mov	r1, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	60ba      	str	r2, [r7, #8]
 8001238:	b2ca      	uxtb	r2, r1
 800123a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	429a      	cmp	r2, r3
 8001248:	dbf0      	blt.n	800122c <_read+0x12>
	}

return len;
 800124a:	687b      	ldr	r3, [r7, #4]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e009      	b.n	800127a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	60ba      	str	r2, [r7, #8]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fa40 	bl	80006f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbf1      	blt.n	8001266 <_write+0x12>
	}
	return len;
 8001282:	687b      	ldr	r3, [r7, #4]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_close>:

int _close(int file)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	return -1;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b4:	605a      	str	r2, [r3, #4]
	return 0;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <_isatty>:

int _isatty(int file)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	return 1;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012da:	b480      	push	{r7}
 80012dc:	b085      	sub	sp, #20
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
	return 0;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012fc:	4a14      	ldr	r2, [pc, #80]	; (8001350 <_sbrk+0x5c>)
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <_sbrk+0x60>)
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <_sbrk+0x64>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <_sbrk+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	429a      	cmp	r2, r3
 8001322:	d207      	bcs.n	8001334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001324:	f002 fb28 	bl	8003978 <__errno>
 8001328:	4603      	mov	r3, r0
 800132a:	220c      	movs	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001332:	e009      	b.n	8001348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <_sbrk+0x64>)
 8001344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20030000 	.word	0x20030000
 8001354:	00000400 	.word	0x00000400
 8001358:	2000080c 	.word	0x2000080c
 800135c:	20000828 	.word	0x20000828

08001360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 8001384:	bf00      	nop
  nop
 8001386:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8001388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800138e:	490e      	ldr	r1, [pc, #56]	; (80013c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013a4:	4c0b      	ldr	r4, [pc, #44]	; (80013d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013b2:	f7ff ffd5 	bl	8001360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013b6:	f002 fcaf 	bl	8003d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ba:	f7ff fab5 	bl	8000928 <main>
  bx  lr    
 80013be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013cc:	08004ab8 	.word	0x08004ab8
  ldr r2, =_sbss
 80013d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013d4:	20000824 	.word	0x20000824

080013d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC_IRQHandler>
	...

080013dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <HAL_Init+0x40>)
 80013e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_Init+0x40>)
 80013f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_Init+0x40>)
 80013fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 f931 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140a:	2000      	movs	r0, #0
 800140c:	f000 f808 	bl	8001420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001410:	f7ff fd38 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023c00 	.word	0x40023c00

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x54>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x58>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	fbb3 f3f1 	udiv	r3, r3, r1
 800143a:	fbb2 f3f3 	udiv	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f93b 	bl	80016ba <HAL_SYSTICK_Config>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e00e      	b.n	800146c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d80a      	bhi.n	800146a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001454:	2200      	movs	r2, #0
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800145c:	f000 f911 	bl	8001682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001460:	4a06      	ldr	r2, [pc, #24]	; (800147c <HAL_InitTick+0x5c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000008 	.word	0x20000008
 800147c:	20000004 	.word	0x20000004

08001480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x20>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x24>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_IncTick+0x24>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000810 	.word	0x20000810

080014a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_GetTick+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000810 	.word	0x20000810

080014c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff ffee 	bl	80014a8 <HAL_GetTick>
 80014cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014d8:	d005      	beq.n	80014e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_Delay+0x44>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014e6:	bf00      	nop
 80014e8:	f7ff ffde 	bl	80014a8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d8f7      	bhi.n	80014e8 <HAL_Delay+0x28>
  {
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000008 	.word	0x20000008

08001508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60d3      	str	r3, [r2, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800164c:	f7ff ff8e 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff47 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff5c 	bl	8001550 <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff8e 	bl	80015c0 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5d 	bl	800156c <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffb0 	bl	8001628 <SysTick_Config>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e06c      	b.n	80017c0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d106      	bne.n	80016fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2223      	movs	r2, #35	; 0x23
 80016f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fbeb 	bl	8000ed4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <HAL_ETH_Init+0xf4>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a30      	ldr	r2, [pc, #192]	; (80017c8 <HAL_ETH_Init+0xf4>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <HAL_ETH_Init+0xf4>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800171a:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_ETH_Init+0xf8>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4a2b      	ldr	r2, [pc, #172]	; (80017cc <HAL_ETH_Init+0xf8>)
 8001720:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001724:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001726:	4b29      	ldr	r3, [pc, #164]	; (80017cc <HAL_ETH_Init+0xf8>)
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	4927      	ldr	r1, [pc, #156]	; (80017cc <HAL_ETH_Init+0xf8>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_ETH_Init+0xf8>)
 8001736:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800174e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001750:	f7ff feaa 	bl	80014a8 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001756:	e011      	b.n	800177c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001758:	f7ff fea6 	bl	80014a8 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001766:	d909      	bls.n	800177c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2204      	movs	r2, #4
 800176c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	22e0      	movs	r2, #224	; 0xe0
 8001774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e021      	b.n	80017c0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1e4      	bne.n	8001758 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f944 	bl	8001a1c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f9eb 	bl	8001b70 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fa41 	bl	8001c22 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	461a      	mov	r2, r3
 80017a6:	2100      	movs	r1, #0
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f9a9 	bl	8001b00 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2210      	movs	r2, #16
 80017ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40013800 	.word	0x40013800

080017d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4b47      	ldr	r3, [pc, #284]	; (8001904 <ETH_SetMACConfig+0x134>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	7c1b      	ldrb	r3, [r3, #16]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <ETH_SetMACConfig+0x28>
 80017f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017f6:	e000      	b.n	80017fa <ETH_SetMACConfig+0x2a>
 80017f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	7c5b      	ldrb	r3, [r3, #17]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <ETH_SetMACConfig+0x38>
 8001802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001806:	e000      	b.n	800180a <ETH_SetMACConfig+0x3a>
 8001808:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800180a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001810:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	7fdb      	ldrb	r3, [r3, #31]
 8001816:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001818:	431a      	orrs	r2, r3
                        macconf->Speed |
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800181e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	7f92      	ldrb	r2, [r2, #30]
 8001824:	2a00      	cmp	r2, #0
 8001826:	d102      	bne.n	800182e <ETH_SetMACConfig+0x5e>
 8001828:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182c:	e000      	b.n	8001830 <ETH_SetMACConfig+0x60>
 800182e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001830:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	7f1b      	ldrb	r3, [r3, #28]
 8001836:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001838:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800183e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	791b      	ldrb	r3, [r3, #4]
 8001844:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001846:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800184e:	2a00      	cmp	r2, #0
 8001850:	d102      	bne.n	8001858 <ETH_SetMACConfig+0x88>
 8001852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001856:	e000      	b.n	800185a <ETH_SetMACConfig+0x8a>
 8001858:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800185a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	7bdb      	ldrb	r3, [r3, #15]
 8001860:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001862:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001868:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001870:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001872:	4313      	orrs	r3, r2
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800188a:	2001      	movs	r0, #1
 800188c:	f7ff fe18 	bl	80014c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80018a6:	4013      	ands	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018b6:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80018bc:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80018c4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80018cc:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018d4:	4313      	orrs	r3, r2
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff fde7 	bl	80014c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	619a      	str	r2, [r3, #24]
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	ff20810f 	.word	0xff20810f

08001908 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <ETH_SetDMAConfig+0x110>)
 8001922:	4013      	ands	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	7b1b      	ldrb	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <ETH_SetDMAConfig+0x2c>
 800192e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001932:	e000      	b.n	8001936 <ETH_SetDMAConfig+0x2e>
 8001934:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	7b5b      	ldrb	r3, [r3, #13]
 800193a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800193c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	7f52      	ldrb	r2, [r2, #29]
 8001942:	2a00      	cmp	r2, #0
 8001944:	d102      	bne.n	800194c <ETH_SetDMAConfig+0x44>
 8001946:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800194a:	e000      	b.n	800194e <ETH_SetDMAConfig+0x46>
 800194c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800194e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	7b9b      	ldrb	r3, [r3, #14]
 8001954:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001956:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800195c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	7f1b      	ldrb	r3, [r3, #28]
 8001962:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001964:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	7f9b      	ldrb	r3, [r3, #30]
 800196a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800196c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001972:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800197a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800197c:	4313      	orrs	r3, r2
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198c:	461a      	mov	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff fd8e 	bl	80014c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ac:	461a      	mov	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80019c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80019d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7ff fd5f 	bl	80014c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	f8de3f23 	.word	0xf8de3f23

08001a1c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b0a6      	sub	sp, #152	; 0x98
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001a24:	2301      	movs	r3, #1
 8001a26:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fe9a 	bl	80017d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ad2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ad6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001adc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	4619      	mov	r1, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff08 	bl	8001908 <ETH_SetDMAConfig>
}
 8001af8:	bf00      	nop
 8001afa:	3798      	adds	r7, #152	; 0x98
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3305      	adds	r3, #5
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	3204      	adds	r2, #4
 8001b18:	7812      	ldrb	r2, [r2, #0]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <ETH_MACAddressConfig+0x68>)
 8001b22:	4413      	add	r3, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	061a      	lsls	r2, r3, #24
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3302      	adds	r3, #2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	4313      	orrs	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <ETH_MACAddressConfig+0x6c>)
 8001b52:	4413      	add	r3, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	6013      	str	r3, [r2, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40028040 	.word	0x40028040
 8001b6c:	40028044 	.word	0x40028044

08001b70 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e03e      	b.n	8001bfc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68d9      	ldr	r1, [r3, #12]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	3206      	adds	r2, #6
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d80c      	bhi.n	8001be0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68d9      	ldr	r1, [r3, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	e004      	b.n	8001bea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	461a      	mov	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d9bd      	bls.n	8001b7e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c14:	611a      	str	r2, [r3, #16]
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e046      	b.n	8001cbe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6919      	ldr	r1, [r3, #16]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c6c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001c74:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c82:	68b9      	ldr	r1, [r7, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	3212      	adds	r2, #18
 8001c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d80c      	bhi.n	8001cae <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6919      	ldr	r1, [r3, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	e004      	b.n	8001cb8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d9b5      	bls.n	8001c30 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cee:	60da      	str	r2, [r3, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e177      	b.n	8002008 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f040 8166 	bne.w	8002002 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d005      	beq.n	8001d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d130      	bne.n	8001db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 0201 	and.w	r2, r3, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d017      	beq.n	8001dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d123      	bne.n	8001e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	08da      	lsrs	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3208      	adds	r2, #8
 8001e3a:	69b9      	ldr	r1, [r7, #24]
 8001e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80c0 	beq.w	8002002 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b66      	ldr	r3, [pc, #408]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a65      	ldr	r2, [pc, #404]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b63      	ldr	r3, [pc, #396]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9e:	4a61      	ldr	r2, [pc, #388]	; (8002024 <HAL_GPIO_Init+0x328>)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a58      	ldr	r2, [pc, #352]	; (8002028 <HAL_GPIO_Init+0x32c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d037      	beq.n	8001f3a <HAL_GPIO_Init+0x23e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a57      	ldr	r2, [pc, #348]	; (800202c <HAL_GPIO_Init+0x330>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d031      	beq.n	8001f36 <HAL_GPIO_Init+0x23a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a56      	ldr	r2, [pc, #344]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d02b      	beq.n	8001f32 <HAL_GPIO_Init+0x236>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a55      	ldr	r2, [pc, #340]	; (8002034 <HAL_GPIO_Init+0x338>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d025      	beq.n	8001f2e <HAL_GPIO_Init+0x232>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a54      	ldr	r2, [pc, #336]	; (8002038 <HAL_GPIO_Init+0x33c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01f      	beq.n	8001f2a <HAL_GPIO_Init+0x22e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a53      	ldr	r2, [pc, #332]	; (800203c <HAL_GPIO_Init+0x340>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d019      	beq.n	8001f26 <HAL_GPIO_Init+0x22a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	; (8002040 <HAL_GPIO_Init+0x344>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_GPIO_Init+0x226>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a51      	ldr	r2, [pc, #324]	; (8002044 <HAL_GPIO_Init+0x348>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00d      	beq.n	8001f1e <HAL_GPIO_Init+0x222>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a50      	ldr	r2, [pc, #320]	; (8002048 <HAL_GPIO_Init+0x34c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <HAL_GPIO_Init+0x21e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4f      	ldr	r2, [pc, #316]	; (800204c <HAL_GPIO_Init+0x350>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d101      	bne.n	8001f16 <HAL_GPIO_Init+0x21a>
 8001f12:	2309      	movs	r3, #9
 8001f14:	e012      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f16:	230a      	movs	r3, #10
 8001f18:	e010      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	e00e      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	e00c      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f22:	2306      	movs	r3, #6
 8001f24:	e00a      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f26:	2305      	movs	r3, #5
 8001f28:	e008      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e004      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	f002 0203 	and.w	r2, r2, #3
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	4093      	lsls	r3, r2
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f4c:	4935      	ldr	r1, [pc, #212]	; (8002024 <HAL_GPIO_Init+0x328>)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f7e:	4a34      	ldr	r2, [pc, #208]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa8:	4a29      	ldr	r2, [pc, #164]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fae:	4b28      	ldr	r3, [pc, #160]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd2:	4a1f      	ldr	r2, [pc, #124]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3301      	adds	r3, #1
 8002006:	61fb      	str	r3, [r7, #28]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	2b0f      	cmp	r3, #15
 800200c:	f67f ae84 	bls.w	8001d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	40013800 	.word	0x40013800
 8002028:	40020000 	.word	0x40020000
 800202c:	40020400 	.word	0x40020400
 8002030:	40020800 	.word	0x40020800
 8002034:	40020c00 	.word	0x40020c00
 8002038:	40021000 	.word	0x40021000
 800203c:	40021400 	.word	0x40021400
 8002040:	40021800 	.word	0x40021800
 8002044:	40021c00 	.word	0x40021c00
 8002048:	40022000 	.word	0x40022000
 800204c:	40022400 	.word	0x40022400
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002070:	e003      	b.n	800207a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	041a      	lsls	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002086:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002088:	b08f      	sub	sp, #60	; 0x3c
 800208a:	af0a      	add	r7, sp, #40	; 0x28
 800208c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e10f      	b.n	80022b8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff f81c 	bl	80010f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 f9ad 	bl	8003436 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	687e      	ldr	r6, [r7, #4]
 80020e4:	466d      	mov	r5, sp
 80020e6:	f106 0410 	add.w	r4, r6, #16
 80020ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020fa:	1d33      	adds	r3, r6, #4
 80020fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fe:	6838      	ldr	r0, [r7, #0]
 8002100:	f001 f938 	bl	8003374 <USB_CoreInit>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0d0      	b.n	80022b8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f001 f99b 	bl	8003458 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	e04a      	b.n	80021be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	333d      	adds	r3, #61	; 0x3d
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	333c      	adds	r3, #60	; 0x3c
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	b298      	uxth	r0, r3
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3344      	adds	r3, #68	; 0x44
 8002164:	4602      	mov	r2, r0
 8002166:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	3340      	adds	r3, #64	; 0x40
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3348      	adds	r3, #72	; 0x48
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	334c      	adds	r3, #76	; 0x4c
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	3354      	adds	r3, #84	; 0x54
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	3301      	adds	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d3af      	bcc.n	8002128 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e044      	b.n	8002258 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	3301      	adds	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	429a      	cmp	r2, r3
 8002260:	d3b5      	bcc.n	80021ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	687e      	ldr	r6, [r7, #4]
 800226a:	466d      	mov	r5, sp
 800226c:	f106 0410 	add.w	r4, r6, #16
 8002270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002278:	e894 0003 	ldmia.w	r4, {r0, r1}
 800227c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002280:	1d33      	adds	r3, r6, #4
 8002282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002284:	6838      	ldr	r0, [r7, #0]
 8002286:	f001 f933 	bl	80034f0 <USB_DevInit>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e00d      	b.n	80022b8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f001 fafe 	bl	80038b2 <USB_DevDisconnect>

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e267      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d075      	beq.n	80023ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d00c      	beq.n	8002304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ea:	4b85      	ldr	r3, [pc, #532]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d112      	bne.n	800231c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f6:	4b82      	ldr	r3, [pc, #520]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002302:	d10b      	bne.n	800231c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	4b7e      	ldr	r3, [pc, #504]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d05b      	beq.n	80023c8 <HAL_RCC_OscConfig+0x108>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d157      	bne.n	80023c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e242      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002324:	d106      	bne.n	8002334 <HAL_RCC_OscConfig+0x74>
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a75      	ldr	r2, [pc, #468]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e01d      	b.n	8002370 <HAL_RCC_OscConfig+0xb0>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x98>
 800233e:	4b70      	ldr	r3, [pc, #448]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a6f      	ldr	r2, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b6d      	ldr	r3, [pc, #436]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a6c      	ldr	r2, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0xb0>
 8002358:	4b69      	ldr	r3, [pc, #420]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a68      	ldr	r2, [pc, #416]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a65      	ldr	r2, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff f896 	bl	80014a8 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002380:	f7ff f892 	bl	80014a8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e207      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b5b      	ldr	r3, [pc, #364]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0xc0>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7ff f882 	bl	80014a8 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7ff f87e 	bl	80014a8 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1f3      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	4b51      	ldr	r3, [pc, #324]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0xe8>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d063      	beq.n	800249e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d11c      	bne.n	8002428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ee:	4b44      	ldr	r3, [pc, #272]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x152>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e1c7      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4937      	ldr	r1, [pc, #220]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	e03a      	b.n	800249e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002430:	4b34      	ldr	r3, [pc, #208]	; (8002504 <HAL_RCC_OscConfig+0x244>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7ff f837 	bl	80014a8 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243e:	f7ff f833 	bl	80014a8 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e1a8      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	4b28      	ldr	r3, [pc, #160]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4925      	ldr	r1, [pc, #148]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <HAL_RCC_OscConfig+0x244>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7ff f816 	bl	80014a8 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002480:	f7ff f812 	bl	80014a8 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e187      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d036      	beq.n	8002518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_RCC_OscConfig+0x248>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7fe fff6 	bl	80014a8 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c0:	f7fe fff2 	bl	80014a8 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e167      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80024d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x200>
 80024de:	e01b      	b.n	8002518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_OscConfig+0x248>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7fe ffdf 	bl	80014a8 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	e00e      	b.n	800250c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ee:	f7fe ffdb 	bl	80014a8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d907      	bls.n	800250c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e150      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
 8002500:	40023800 	.word	0x40023800
 8002504:	42470000 	.word	0x42470000
 8002508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	4b88      	ldr	r3, [pc, #544]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ea      	bne.n	80024ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8097 	beq.w	8002654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252a:	4b81      	ldr	r3, [pc, #516]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b7d      	ldr	r3, [pc, #500]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a7c      	ldr	r2, [pc, #496]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b7a      	ldr	r3, [pc, #488]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002552:	2301      	movs	r3, #1
 8002554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b77      	ldr	r3, [pc, #476]	; (8002734 <HAL_RCC_OscConfig+0x474>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d118      	bne.n	8002594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002562:	4b74      	ldr	r3, [pc, #464]	; (8002734 <HAL_RCC_OscConfig+0x474>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a73      	ldr	r2, [pc, #460]	; (8002734 <HAL_RCC_OscConfig+0x474>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256e:	f7fe ff9b 	bl	80014a8 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7fe ff97 	bl	80014a8 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e10c      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCC_OscConfig+0x474>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x2ea>
 800259c:	4b64      	ldr	r3, [pc, #400]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a63      	ldr	r2, [pc, #396]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
 80025a8:	e01c      	b.n	80025e4 <HAL_RCC_OscConfig+0x324>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x30c>
 80025b2:	4b5f      	ldr	r3, [pc, #380]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	4a5e      	ldr	r2, [pc, #376]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025b8:	f043 0304 	orr.w	r3, r3, #4
 80025bc:	6713      	str	r3, [r2, #112]	; 0x70
 80025be:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	4a5b      	ldr	r2, [pc, #364]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0x324>
 80025cc:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	; 0x70
 80025d8:	4b55      	ldr	r3, [pc, #340]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a54      	ldr	r2, [pc, #336]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025de:	f023 0304 	bic.w	r3, r3, #4
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe ff5c 	bl	80014a8 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f2:	e00a      	b.n	800260a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7fe ff58 	bl	80014a8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0cb      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260a:	4b49      	ldr	r3, [pc, #292]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0ee      	beq.n	80025f4 <HAL_RCC_OscConfig+0x334>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002618:	f7fe ff46 	bl	80014a8 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7fe ff42 	bl	80014a8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0b5      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002636:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1ee      	bne.n	8002620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002648:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	4a38      	ldr	r2, [pc, #224]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800264e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80a1 	beq.w	80027a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800265e:	4b34      	ldr	r3, [pc, #208]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b08      	cmp	r3, #8
 8002668:	d05c      	beq.n	8002724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d141      	bne.n	80026f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002672:	4b31      	ldr	r3, [pc, #196]	; (8002738 <HAL_RCC_OscConfig+0x478>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe ff16 	bl	80014a8 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe ff12 	bl	80014a8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e087      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	4b27      	ldr	r3, [pc, #156]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	3b01      	subs	r3, #1
 80026b8:	041b      	lsls	r3, r3, #16
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	061b      	lsls	r3, r3, #24
 80026c2:	491b      	ldr	r1, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_RCC_OscConfig+0x478>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe feeb 	bl	80014a8 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe fee7 	bl	80014a8 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e05c      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x416>
 80026f4:	e054      	b.n	80027a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_RCC_OscConfig+0x478>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fed4 	bl	80014a8 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe fed0 	bl	80014a8 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e045      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x444>
 8002722:	e03d      	b.n	80027a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d107      	bne.n	800273c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e038      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
 8002730:	40023800 	.word	0x40023800
 8002734:	40007000 	.word	0x40007000
 8002738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800273c:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <HAL_RCC_OscConfig+0x4ec>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d028      	beq.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d121      	bne.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d11a      	bne.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800276c:	4013      	ands	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002774:	4293      	cmp	r3, r2
 8002776:	d111      	bne.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	3b01      	subs	r3, #1
 8002786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d107      	bne.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800

080027b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0cc      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b68      	ldr	r3, [pc, #416]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d90c      	bls.n	80027ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b65      	ldr	r3, [pc, #404]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b63      	ldr	r3, [pc, #396]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0b8      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d020      	beq.n	800283a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002804:	4b59      	ldr	r3, [pc, #356]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800280e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800281c:	4b53      	ldr	r3, [pc, #332]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a52      	ldr	r2, [pc, #328]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002828:	4b50      	ldr	r3, [pc, #320]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	494d      	ldr	r1, [pc, #308]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d044      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d119      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e07f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d003      	beq.n	800286e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	2b03      	cmp	r3, #3
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	4b3f      	ldr	r3, [pc, #252]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e06f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287e:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e067      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f023 0203 	bic.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4934      	ldr	r1, [pc, #208]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	4313      	orrs	r3, r2
 800289e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a0:	f7fe fe02 	bl	80014a8 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	e00a      	b.n	80028be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a8:	f7fe fdfe 	bl	80014a8 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e04f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b2b      	ldr	r3, [pc, #172]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 020c 	and.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1eb      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b25      	ldr	r3, [pc, #148]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d20c      	bcs.n	80028f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e032      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4916      	ldr	r1, [pc, #88]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	490e      	ldr	r1, [pc, #56]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002936:	f000 f821 	bl	800297c <HAL_RCC_GetSysClockFreq>
 800293a:	4602      	mov	r2, r0
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	490a      	ldr	r1, [pc, #40]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	5ccb      	ldrb	r3, [r1, r3]
 800294a:	fa22 f303 	lsr.w	r3, r2, r3
 800294e:	4a09      	ldr	r2, [pc, #36]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1c8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fd62 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023c00 	.word	0x40023c00
 800296c:	40023800 	.word	0x40023800
 8002970:	080049f8 	.word	0x080049f8
 8002974:	20000000 	.word	0x20000000
 8002978:	20000004 	.word	0x20000004

0800297c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800297c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002980:	b094      	sub	sp, #80	; 0x50
 8002982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	647b      	str	r3, [r7, #68]	; 0x44
 8002988:	2300      	movs	r3, #0
 800298a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800298c:	2300      	movs	r3, #0
 800298e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002994:	4b79      	ldr	r3, [pc, #484]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d00d      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x40>
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	f200 80e1 	bhi.w	8002b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x34>
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ae:	e0db      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80029b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029b4:	e0db      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b6:	4b73      	ldr	r3, [pc, #460]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x208>)
 80029b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ba:	e0d8      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029bc:	4b6f      	ldr	r3, [pc, #444]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c6:	4b6d      	ldr	r3, [pc, #436]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d063      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d2:	4b6a      	ldr	r3, [pc, #424]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	099b      	lsrs	r3, r3, #6
 80029d8:	2200      	movs	r2, #0
 80029da:	63bb      	str	r3, [r7, #56]	; 0x38
 80029dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e4:	633b      	str	r3, [r7, #48]	; 0x30
 80029e6:	2300      	movs	r3, #0
 80029e8:	637b      	str	r3, [r7, #52]	; 0x34
 80029ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029ee:	4622      	mov	r2, r4
 80029f0:	462b      	mov	r3, r5
 80029f2:	f04f 0000 	mov.w	r0, #0
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	0159      	lsls	r1, r3, #5
 80029fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a00:	0150      	lsls	r0, r2, #5
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4621      	mov	r1, r4
 8002a08:	1a51      	subs	r1, r2, r1
 8002a0a:	6139      	str	r1, [r7, #16]
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a20:	4659      	mov	r1, fp
 8002a22:	018b      	lsls	r3, r1, #6
 8002a24:	4651      	mov	r1, sl
 8002a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a2a:	4651      	mov	r1, sl
 8002a2c:	018a      	lsls	r2, r1, #6
 8002a2e:	4651      	mov	r1, sl
 8002a30:	ebb2 0801 	subs.w	r8, r2, r1
 8002a34:	4659      	mov	r1, fp
 8002a36:	eb63 0901 	sbc.w	r9, r3, r1
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a4e:	4690      	mov	r8, r2
 8002a50:	4699      	mov	r9, r3
 8002a52:	4623      	mov	r3, r4
 8002a54:	eb18 0303 	adds.w	r3, r8, r3
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	462b      	mov	r3, r5
 8002a5c:	eb49 0303 	adc.w	r3, r9, r3
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a6e:	4629      	mov	r1, r5
 8002a70:	024b      	lsls	r3, r1, #9
 8002a72:	4621      	mov	r1, r4
 8002a74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a78:	4621      	mov	r1, r4
 8002a7a:	024a      	lsls	r2, r1, #9
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a82:	2200      	movs	r2, #0
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a8c:	f7fd fcb0 	bl	80003f0 <__aeabi_uldivmod>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4613      	mov	r3, r2
 8002a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a98:	e058      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9a:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aaa:	623b      	str	r3, [r7, #32]
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ab4:	4642      	mov	r2, r8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	f04f 0000 	mov.w	r0, #0
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	0159      	lsls	r1, r3, #5
 8002ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac6:	0150      	lsls	r0, r2, #5
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4641      	mov	r1, r8
 8002ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002aec:	ebb2 040a 	subs.w	r4, r2, sl
 8002af0:	eb63 050b 	sbc.w	r5, r3, fp
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	00eb      	lsls	r3, r5, #3
 8002afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b02:	00e2      	lsls	r2, r4, #3
 8002b04:	4614      	mov	r4, r2
 8002b06:	461d      	mov	r5, r3
 8002b08:	4643      	mov	r3, r8
 8002b0a:	18e3      	adds	r3, r4, r3
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	464b      	mov	r3, r9
 8002b10:	eb45 0303 	adc.w	r3, r5, r3
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b22:	4629      	mov	r1, r5
 8002b24:	028b      	lsls	r3, r1, #10
 8002b26:	4621      	mov	r1, r4
 8002b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	028a      	lsls	r2, r1, #10
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b36:	2200      	movs	r2, #0
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	61fa      	str	r2, [r7, #28]
 8002b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b40:	f7fd fc56 	bl	80003f0 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	3301      	adds	r3, #1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b66:	e002      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3750      	adds	r7, #80	; 0x50
 8002b74:	46bd      	mov	sp, r7
 8002b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	00f42400 	.word	0x00f42400
 8002b84:	007a1200 	.word	0x007a1200

08002b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000000 	.word	0x20000000

08002ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ba4:	f7ff fff0 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0a9b      	lsrs	r3, r3, #10
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	; (8002bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	08004a08 	.word	0x08004a08

08002bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bcc:	f7ff ffdc 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	0b5b      	lsrs	r3, r3, #13
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	4903      	ldr	r1, [pc, #12]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bde:	5ccb      	ldrb	r3, [r1, r3]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	08004a08 	.word	0x08004a08

08002bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e03f      	b.n	8002c82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fe fa22 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2224      	movs	r2, #36	; 0x24
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f929 	bl	8002e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b08a      	sub	sp, #40	; 0x28
 8002c8e:	af02      	add	r7, sp, #8
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	4613      	mov	r3, r2
 8002c98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d17c      	bne.n	8002da4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_UART_Transmit+0x2c>
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e075      	b.n	8002da6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_UART_Transmit+0x3e>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e06e      	b.n	8002da6 <HAL_UART_Transmit+0x11c>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2221      	movs	r2, #33	; 0x21
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cde:	f7fe fbe3 	bl	80014a8 <HAL_GetTick>
 8002ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf8:	d108      	bne.n	8002d0c <HAL_UART_Transmit+0x82>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d104      	bne.n	8002d0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	e003      	b.n	8002d14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d1c:	e02a      	b.n	8002d74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f840 	bl	8002dae <UART_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e036      	b.n	8002da6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10b      	bne.n	8002d56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	3302      	adds	r3, #2
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	e007      	b.n	8002d66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	3301      	adds	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1cf      	bne.n	8002d1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2140      	movs	r1, #64	; 0x40
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f810 	bl	8002dae <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e006      	b.n	8002da6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e000      	b.n	8002da6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b090      	sub	sp, #64	; 0x40
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dbe:	e050      	b.n	8002e62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc6:	d04c      	beq.n	8002e62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <UART_WaitOnFlagUntilTimeout+0x30>
 8002dce:	f7fe fb6b 	bl	80014a8 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d241      	bcs.n	8002e62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	330c      	adds	r3, #12
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	e853 3f00 	ldrex	r3, [r3]
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dfe:	637a      	str	r2, [r7, #52]	; 0x34
 8002e00:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e06:	e841 2300 	strex	r3, r2, [r1]
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1e5      	bne.n	8002dde <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3314      	adds	r3, #20
 8002e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	613b      	str	r3, [r7, #16]
   return(result);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e32:	623a      	str	r2, [r7, #32]
 8002e34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	69f9      	ldr	r1, [r7, #28]
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e5      	bne.n	8002e12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e00f      	b.n	8002e82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	bf0c      	ite	eq
 8002e72:	2301      	moveq	r3, #1
 8002e74:	2300      	movne	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d09f      	beq.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3740      	adds	r7, #64	; 0x40
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e90:	b0c0      	sub	sp, #256	; 0x100
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	68d9      	ldr	r1, [r3, #12]
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	ea40 0301 	orr.w	r3, r0, r1
 8002eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ee4:	f021 010c 	bic.w	r1, r1, #12
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f06:	6999      	ldr	r1, [r3, #24]
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	ea40 0301 	orr.w	r3, r0, r1
 8002f12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4b8f      	ldr	r3, [pc, #572]	; (8003158 <UART_SetConfig+0x2cc>)
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d005      	beq.n	8002f2c <UART_SetConfig+0xa0>
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4b8d      	ldr	r3, [pc, #564]	; (800315c <UART_SetConfig+0x2d0>)
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d104      	bne.n	8002f36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f2c:	f7ff fe4c 	bl	8002bc8 <HAL_RCC_GetPCLK2Freq>
 8002f30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f34:	e003      	b.n	8002f3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f36:	f7ff fe33 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 8002f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f48:	f040 810c 	bne.w	8003164 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f50:	2200      	movs	r2, #0
 8002f52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f5e:	4622      	mov	r2, r4
 8002f60:	462b      	mov	r3, r5
 8002f62:	1891      	adds	r1, r2, r2
 8002f64:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f66:	415b      	adcs	r3, r3
 8002f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f6e:	4621      	mov	r1, r4
 8002f70:	eb12 0801 	adds.w	r8, r2, r1
 8002f74:	4629      	mov	r1, r5
 8002f76:	eb43 0901 	adc.w	r9, r3, r1
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f8e:	4690      	mov	r8, r2
 8002f90:	4699      	mov	r9, r3
 8002f92:	4623      	mov	r3, r4
 8002f94:	eb18 0303 	adds.w	r3, r8, r3
 8002f98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f9c:	462b      	mov	r3, r5
 8002f9e:	eb49 0303 	adc.w	r3, r9, r3
 8002fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fba:	460b      	mov	r3, r1
 8002fbc:	18db      	adds	r3, r3, r3
 8002fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	eb42 0303 	adc.w	r3, r2, r3
 8002fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8002fc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fd0:	f7fd fa0e 	bl	80003f0 <__aeabi_uldivmod>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4b61      	ldr	r3, [pc, #388]	; (8003160 <UART_SetConfig+0x2d4>)
 8002fda:	fba3 2302 	umull	r2, r3, r3, r2
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	011c      	lsls	r4, r3, #4
 8002fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ff0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	1891      	adds	r1, r2, r2
 8002ffa:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ffc:	415b      	adcs	r3, r3
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003004:	4641      	mov	r1, r8
 8003006:	eb12 0a01 	adds.w	sl, r2, r1
 800300a:	4649      	mov	r1, r9
 800300c:	eb43 0b01 	adc.w	fp, r3, r1
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800301c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003024:	4692      	mov	sl, r2
 8003026:	469b      	mov	fp, r3
 8003028:	4643      	mov	r3, r8
 800302a:	eb1a 0303 	adds.w	r3, sl, r3
 800302e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003032:	464b      	mov	r3, r9
 8003034:	eb4b 0303 	adc.w	r3, fp, r3
 8003038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003048:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800304c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003050:	460b      	mov	r3, r1
 8003052:	18db      	adds	r3, r3, r3
 8003054:	643b      	str	r3, [r7, #64]	; 0x40
 8003056:	4613      	mov	r3, r2
 8003058:	eb42 0303 	adc.w	r3, r2, r3
 800305c:	647b      	str	r3, [r7, #68]	; 0x44
 800305e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003066:	f7fd f9c3 	bl	80003f0 <__aeabi_uldivmod>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4611      	mov	r1, r2
 8003070:	4b3b      	ldr	r3, [pc, #236]	; (8003160 <UART_SetConfig+0x2d4>)
 8003072:	fba3 2301 	umull	r2, r3, r3, r1
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2264      	movs	r2, #100	; 0x64
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	1acb      	subs	r3, r1, r3
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003086:	4b36      	ldr	r3, [pc, #216]	; (8003160 <UART_SetConfig+0x2d4>)
 8003088:	fba3 2302 	umull	r2, r3, r3, r2
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003094:	441c      	add	r4, r3
 8003096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030a8:	4642      	mov	r2, r8
 80030aa:	464b      	mov	r3, r9
 80030ac:	1891      	adds	r1, r2, r2
 80030ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80030b0:	415b      	adcs	r3, r3
 80030b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030b8:	4641      	mov	r1, r8
 80030ba:	1851      	adds	r1, r2, r1
 80030bc:	6339      	str	r1, [r7, #48]	; 0x30
 80030be:	4649      	mov	r1, r9
 80030c0:	414b      	adcs	r3, r1
 80030c2:	637b      	str	r3, [r7, #52]	; 0x34
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030d0:	4659      	mov	r1, fp
 80030d2:	00cb      	lsls	r3, r1, #3
 80030d4:	4651      	mov	r1, sl
 80030d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030da:	4651      	mov	r1, sl
 80030dc:	00ca      	lsls	r2, r1, #3
 80030de:	4610      	mov	r0, r2
 80030e0:	4619      	mov	r1, r3
 80030e2:	4603      	mov	r3, r0
 80030e4:	4642      	mov	r2, r8
 80030e6:	189b      	adds	r3, r3, r2
 80030e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030ec:	464b      	mov	r3, r9
 80030ee:	460a      	mov	r2, r1
 80030f0:	eb42 0303 	adc.w	r3, r2, r3
 80030f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003104:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800310c:	460b      	mov	r3, r1
 800310e:	18db      	adds	r3, r3, r3
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
 8003112:	4613      	mov	r3, r2
 8003114:	eb42 0303 	adc.w	r3, r2, r3
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800311a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800311e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003122:	f7fd f965 	bl	80003f0 <__aeabi_uldivmod>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <UART_SetConfig+0x2d4>)
 800312c:	fba3 1302 	umull	r1, r3, r3, r2
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	2164      	movs	r1, #100	; 0x64
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	3332      	adds	r3, #50	; 0x32
 800313e:	4a08      	ldr	r2, [pc, #32]	; (8003160 <UART_SetConfig+0x2d4>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	f003 0207 	and.w	r2, r3, #7
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4422      	add	r2, r4
 8003152:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003154:	e105      	b.n	8003362 <UART_SetConfig+0x4d6>
 8003156:	bf00      	nop
 8003158:	40011000 	.word	0x40011000
 800315c:	40011400 	.word	0x40011400
 8003160:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003168:	2200      	movs	r2, #0
 800316a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800316e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003172:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003176:	4642      	mov	r2, r8
 8003178:	464b      	mov	r3, r9
 800317a:	1891      	adds	r1, r2, r2
 800317c:	6239      	str	r1, [r7, #32]
 800317e:	415b      	adcs	r3, r3
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
 8003182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003186:	4641      	mov	r1, r8
 8003188:	1854      	adds	r4, r2, r1
 800318a:	4649      	mov	r1, r9
 800318c:	eb43 0501 	adc.w	r5, r3, r1
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	00eb      	lsls	r3, r5, #3
 800319a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800319e:	00e2      	lsls	r2, r4, #3
 80031a0:	4614      	mov	r4, r2
 80031a2:	461d      	mov	r5, r3
 80031a4:	4643      	mov	r3, r8
 80031a6:	18e3      	adds	r3, r4, r3
 80031a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031ac:	464b      	mov	r3, r9
 80031ae:	eb45 0303 	adc.w	r3, r5, r3
 80031b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031d2:	4629      	mov	r1, r5
 80031d4:	008b      	lsls	r3, r1, #2
 80031d6:	4621      	mov	r1, r4
 80031d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031dc:	4621      	mov	r1, r4
 80031de:	008a      	lsls	r2, r1, #2
 80031e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031e4:	f7fd f904 	bl	80003f0 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4b60      	ldr	r3, [pc, #384]	; (8003370 <UART_SetConfig+0x4e4>)
 80031ee:	fba3 2302 	umull	r2, r3, r3, r2
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	011c      	lsls	r4, r3, #4
 80031f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003200:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003204:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003208:	4642      	mov	r2, r8
 800320a:	464b      	mov	r3, r9
 800320c:	1891      	adds	r1, r2, r2
 800320e:	61b9      	str	r1, [r7, #24]
 8003210:	415b      	adcs	r3, r3
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003218:	4641      	mov	r1, r8
 800321a:	1851      	adds	r1, r2, r1
 800321c:	6139      	str	r1, [r7, #16]
 800321e:	4649      	mov	r1, r9
 8003220:	414b      	adcs	r3, r1
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003230:	4659      	mov	r1, fp
 8003232:	00cb      	lsls	r3, r1, #3
 8003234:	4651      	mov	r1, sl
 8003236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323a:	4651      	mov	r1, sl
 800323c:	00ca      	lsls	r2, r1, #3
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	4603      	mov	r3, r0
 8003244:	4642      	mov	r2, r8
 8003246:	189b      	adds	r3, r3, r2
 8003248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800324c:	464b      	mov	r3, r9
 800324e:	460a      	mov	r2, r1
 8003250:	eb42 0303 	adc.w	r3, r2, r3
 8003254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	67bb      	str	r3, [r7, #120]	; 0x78
 8003262:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003270:	4649      	mov	r1, r9
 8003272:	008b      	lsls	r3, r1, #2
 8003274:	4641      	mov	r1, r8
 8003276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800327a:	4641      	mov	r1, r8
 800327c:	008a      	lsls	r2, r1, #2
 800327e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003282:	f7fd f8b5 	bl	80003f0 <__aeabi_uldivmod>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4b39      	ldr	r3, [pc, #228]	; (8003370 <UART_SetConfig+0x4e4>)
 800328c:	fba3 1302 	umull	r1, r3, r3, r2
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	2164      	movs	r1, #100	; 0x64
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	3332      	adds	r3, #50	; 0x32
 800329e:	4a34      	ldr	r2, [pc, #208]	; (8003370 <UART_SetConfig+0x4e4>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032aa:	441c      	add	r4, r3
 80032ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b0:	2200      	movs	r2, #0
 80032b2:	673b      	str	r3, [r7, #112]	; 0x70
 80032b4:	677a      	str	r2, [r7, #116]	; 0x74
 80032b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032ba:	4642      	mov	r2, r8
 80032bc:	464b      	mov	r3, r9
 80032be:	1891      	adds	r1, r2, r2
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	415b      	adcs	r3, r3
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ca:	4641      	mov	r1, r8
 80032cc:	1851      	adds	r1, r2, r1
 80032ce:	6039      	str	r1, [r7, #0]
 80032d0:	4649      	mov	r1, r9
 80032d2:	414b      	adcs	r3, r1
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032e2:	4659      	mov	r1, fp
 80032e4:	00cb      	lsls	r3, r1, #3
 80032e6:	4651      	mov	r1, sl
 80032e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ec:	4651      	mov	r1, sl
 80032ee:	00ca      	lsls	r2, r1, #3
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	4603      	mov	r3, r0
 80032f6:	4642      	mov	r2, r8
 80032f8:	189b      	adds	r3, r3, r2
 80032fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80032fc:	464b      	mov	r3, r9
 80032fe:	460a      	mov	r2, r1
 8003300:	eb42 0303 	adc.w	r3, r2, r3
 8003304:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	663b      	str	r3, [r7, #96]	; 0x60
 8003310:	667a      	str	r2, [r7, #100]	; 0x64
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800331e:	4649      	mov	r1, r9
 8003320:	008b      	lsls	r3, r1, #2
 8003322:	4641      	mov	r1, r8
 8003324:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003328:	4641      	mov	r1, r8
 800332a:	008a      	lsls	r2, r1, #2
 800332c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003330:	f7fd f85e 	bl	80003f0 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <UART_SetConfig+0x4e4>)
 800333a:	fba3 1302 	umull	r1, r3, r3, r2
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	2164      	movs	r1, #100	; 0x64
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	3332      	adds	r3, #50	; 0x32
 800334c:	4a08      	ldr	r2, [pc, #32]	; (8003370 <UART_SetConfig+0x4e4>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	f003 020f 	and.w	r2, r3, #15
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4422      	add	r2, r4
 8003360:	609a      	str	r2, [r3, #8]
}
 8003362:	bf00      	nop
 8003364:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003368:	46bd      	mov	sp, r7
 800336a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336e:	bf00      	nop
 8003370:	51eb851f 	.word	0x51eb851f

08003374 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003374:	b084      	sub	sp, #16
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	f107 001c 	add.w	r0, r7, #28
 8003382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	2b01      	cmp	r3, #1
 800338a:	d122      	bne.n	80033d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d105      	bne.n	80033c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 faa2 	bl	8003910 <USB_CoreReset>
 80033cc:	4603      	mov	r3, r0
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	e01a      	b.n	8003408 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa96 	bl	8003910 <USB_CoreReset>
 80033e4:	4603      	mov	r3, r0
 80033e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80033e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38
 80033fa:	e005      	b.n	8003408 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	2b01      	cmp	r3, #1
 800340c:	d10b      	bne.n	8003426 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f043 0206 	orr.w	r2, r3, #6
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003426:	7bfb      	ldrb	r3, [r7, #15]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003432:	b004      	add	sp, #16
 8003434:	4770      	bx	lr

08003436 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 0201 	bic.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d115      	bne.n	80034a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003486:	2001      	movs	r0, #1
 8003488:	f7fe f81a 	bl	80014c0 <HAL_Delay>
      ms++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa2e 	bl	80038f4 <USB_GetMode>
 8003498:	4603      	mov	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	d01e      	beq.n	80034dc <USB_SetCurrentMode+0x84>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b31      	cmp	r3, #49	; 0x31
 80034a2:	d9f0      	bls.n	8003486 <USB_SetCurrentMode+0x2e>
 80034a4:	e01a      	b.n	80034dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d115      	bne.n	80034d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034b8:	2001      	movs	r0, #1
 80034ba:	f7fe f801 	bl	80014c0 <HAL_Delay>
      ms++;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3301      	adds	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fa15 	bl	80038f4 <USB_GetMode>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <USB_SetCurrentMode+0x84>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b31      	cmp	r3, #49	; 0x31
 80034d4:	d9f0      	bls.n	80034b8 <USB_SetCurrentMode+0x60>
 80034d6:	e001      	b.n	80034dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e005      	b.n	80034e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b32      	cmp	r3, #50	; 0x32
 80034e0:	d101      	bne.n	80034e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034f0:	b084      	sub	sp, #16
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80034fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	e009      	b.n	8003524 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	3340      	adds	r3, #64	; 0x40
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	2200      	movs	r2, #0
 800351c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	3301      	adds	r3, #1
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b0e      	cmp	r3, #14
 8003528:	d9f2      	bls.n	8003510 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800352a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d11c      	bne.n	800356a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	639a      	str	r2, [r3, #56]	; 0x38
 8003568:	e00b      	b.n	8003582 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003588:	461a      	mov	r2, r3
 800358a:	2300      	movs	r3, #0
 800358c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003594:	4619      	mov	r1, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359c:	461a      	mov	r2, r3
 800359e:	680b      	ldr	r3, [r1, #0]
 80035a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d10c      	bne.n	80035c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80035ae:	2100      	movs	r1, #0
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f965 	bl	8003880 <USB_SetDevSpeed>
 80035b6:	e008      	b.n	80035ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80035b8:	2101      	movs	r1, #1
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f960 	bl	8003880 <USB_SetDevSpeed>
 80035c0:	e003      	b.n	80035ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80035c2:	2103      	movs	r1, #3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f95b 	bl	8003880 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80035ca:	2110      	movs	r1, #16
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f8f3 	bl	80037b8 <USB_FlushTxFifo>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f91f 	bl	8003820 <USB_FlushRxFifo>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f2:	461a      	mov	r2, r3
 80035f4:	2300      	movs	r3, #0
 80035f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fe:	461a      	mov	r2, r3
 8003600:	2300      	movs	r3, #0
 8003602:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360a:	461a      	mov	r2, r3
 800360c:	2300      	movs	r3, #0
 800360e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	e043      	b.n	800369e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800362c:	d118      	bne.n	8003660 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003640:	461a      	mov	r2, r3
 8003642:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	e013      	b.n	8003672 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003656:	461a      	mov	r2, r3
 8003658:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e008      	b.n	8003672 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366c:	461a      	mov	r2, r3
 800366e:	2300      	movs	r3, #0
 8003670:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367e:	461a      	mov	r2, r3
 8003680:	2300      	movs	r3, #0
 8003682:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003690:	461a      	mov	r2, r3
 8003692:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003696:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	3301      	adds	r3, #1
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d3b7      	bcc.n	8003616 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	e043      	b.n	8003734 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036c2:	d118      	bne.n	80036f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d6:	461a      	mov	r2, r3
 80036d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e013      	b.n	8003708 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ec:	461a      	mov	r2, r3
 80036ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	e008      	b.n	8003708 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003702:	461a      	mov	r2, r3
 8003704:	2300      	movs	r3, #0
 8003706:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003714:	461a      	mov	r2, r3
 8003716:	2300      	movs	r3, #0
 8003718:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003726:	461a      	mov	r2, r3
 8003728:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800372c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	3301      	adds	r3, #1
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	429a      	cmp	r2, r3
 800373a:	d3b7      	bcc.n	80036ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800374e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800375c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f043 0210 	orr.w	r2, r3, #16
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <USB_DevInit+0x2c4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800377c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f043 0208 	orr.w	r2, r3, #8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800378e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003790:	2b01      	cmp	r3, #1
 8003792:	d107      	bne.n	80037a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037b0:	b004      	add	sp, #16
 80037b2:	4770      	bx	lr
 80037b4:	803c3800 	.word	0x803c3800

080037b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3301      	adds	r3, #1
 80037ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a13      	ldr	r2, [pc, #76]	; (800381c <USB_FlushTxFifo+0x64>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d901      	bls.n	80037d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e01b      	b.n	8003810 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	daf2      	bge.n	80037c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	019b      	lsls	r3, r3, #6
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3301      	adds	r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4a08      	ldr	r2, [pc, #32]	; (800381c <USB_FlushTxFifo+0x64>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e006      	b.n	8003810 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b20      	cmp	r3, #32
 800380c:	d0f0      	beq.n	80037f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	00030d40 	.word	0x00030d40

08003820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3301      	adds	r3, #1
 8003830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a11      	ldr	r2, [pc, #68]	; (800387c <USB_FlushRxFifo+0x5c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e018      	b.n	8003870 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	daf2      	bge.n	800382c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2210      	movs	r2, #16
 800384e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	3301      	adds	r3, #1
 8003854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a08      	ldr	r2, [pc, #32]	; (800387c <USB_FlushRxFifo+0x5c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e006      	b.n	8003870 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b10      	cmp	r3, #16
 800386c:	d0f0      	beq.n	8003850 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	00030d40 	.word	0x00030d40

08003880 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	68f9      	ldr	r1, [r7, #12]
 800389c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038a0:	4313      	orrs	r3, r2
 80038a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80038cc:	f023 0303 	bic.w	r3, r3, #3
 80038d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e0:	f043 0302 	orr.w	r3, r3, #2
 80038e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f003 0301 	and.w	r3, r3, #1
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3301      	adds	r3, #1
 8003920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a13      	ldr	r2, [pc, #76]	; (8003974 <USB_CoreReset+0x64>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e01b      	b.n	8003966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	daf2      	bge.n	800391c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f043 0201 	orr.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3301      	adds	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a09      	ldr	r2, [pc, #36]	; (8003974 <USB_CoreReset+0x64>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e006      	b.n	8003966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d0f0      	beq.n	8003946 <USB_CoreReset+0x36>

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	00030d40 	.word	0x00030d40

08003978 <__errno>:
 8003978:	4b01      	ldr	r3, [pc, #4]	; (8003980 <__errno+0x8>)
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	2000000c 	.word	0x2000000c

08003984 <__sflush_r>:
 8003984:	898a      	ldrh	r2, [r1, #12]
 8003986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800398a:	4605      	mov	r5, r0
 800398c:	0710      	lsls	r0, r2, #28
 800398e:	460c      	mov	r4, r1
 8003990:	d458      	bmi.n	8003a44 <__sflush_r+0xc0>
 8003992:	684b      	ldr	r3, [r1, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	dc05      	bgt.n	80039a4 <__sflush_r+0x20>
 8003998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	dc02      	bgt.n	80039a4 <__sflush_r+0x20>
 800399e:	2000      	movs	r0, #0
 80039a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039a6:	2e00      	cmp	r6, #0
 80039a8:	d0f9      	beq.n	800399e <__sflush_r+0x1a>
 80039aa:	2300      	movs	r3, #0
 80039ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039b0:	682f      	ldr	r7, [r5, #0]
 80039b2:	602b      	str	r3, [r5, #0]
 80039b4:	d032      	beq.n	8003a1c <__sflush_r+0x98>
 80039b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039b8:	89a3      	ldrh	r3, [r4, #12]
 80039ba:	075a      	lsls	r2, r3, #29
 80039bc:	d505      	bpl.n	80039ca <__sflush_r+0x46>
 80039be:	6863      	ldr	r3, [r4, #4]
 80039c0:	1ac0      	subs	r0, r0, r3
 80039c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039c4:	b10b      	cbz	r3, 80039ca <__sflush_r+0x46>
 80039c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039c8:	1ac0      	subs	r0, r0, r3
 80039ca:	2300      	movs	r3, #0
 80039cc:	4602      	mov	r2, r0
 80039ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039d0:	6a21      	ldr	r1, [r4, #32]
 80039d2:	4628      	mov	r0, r5
 80039d4:	47b0      	blx	r6
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	89a3      	ldrh	r3, [r4, #12]
 80039da:	d106      	bne.n	80039ea <__sflush_r+0x66>
 80039dc:	6829      	ldr	r1, [r5, #0]
 80039de:	291d      	cmp	r1, #29
 80039e0:	d82c      	bhi.n	8003a3c <__sflush_r+0xb8>
 80039e2:	4a2a      	ldr	r2, [pc, #168]	; (8003a8c <__sflush_r+0x108>)
 80039e4:	40ca      	lsrs	r2, r1
 80039e6:	07d6      	lsls	r6, r2, #31
 80039e8:	d528      	bpl.n	8003a3c <__sflush_r+0xb8>
 80039ea:	2200      	movs	r2, #0
 80039ec:	6062      	str	r2, [r4, #4]
 80039ee:	04d9      	lsls	r1, r3, #19
 80039f0:	6922      	ldr	r2, [r4, #16]
 80039f2:	6022      	str	r2, [r4, #0]
 80039f4:	d504      	bpl.n	8003a00 <__sflush_r+0x7c>
 80039f6:	1c42      	adds	r2, r0, #1
 80039f8:	d101      	bne.n	80039fe <__sflush_r+0x7a>
 80039fa:	682b      	ldr	r3, [r5, #0]
 80039fc:	b903      	cbnz	r3, 8003a00 <__sflush_r+0x7c>
 80039fe:	6560      	str	r0, [r4, #84]	; 0x54
 8003a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a02:	602f      	str	r7, [r5, #0]
 8003a04:	2900      	cmp	r1, #0
 8003a06:	d0ca      	beq.n	800399e <__sflush_r+0x1a>
 8003a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a0c:	4299      	cmp	r1, r3
 8003a0e:	d002      	beq.n	8003a16 <__sflush_r+0x92>
 8003a10:	4628      	mov	r0, r5
 8003a12:	f000 f9b1 	bl	8003d78 <_free_r>
 8003a16:	2000      	movs	r0, #0
 8003a18:	6360      	str	r0, [r4, #52]	; 0x34
 8003a1a:	e7c1      	b.n	80039a0 <__sflush_r+0x1c>
 8003a1c:	6a21      	ldr	r1, [r4, #32]
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4628      	mov	r0, r5
 8003a22:	47b0      	blx	r6
 8003a24:	1c41      	adds	r1, r0, #1
 8003a26:	d1c7      	bne.n	80039b8 <__sflush_r+0x34>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0c4      	beq.n	80039b8 <__sflush_r+0x34>
 8003a2e:	2b1d      	cmp	r3, #29
 8003a30:	d001      	beq.n	8003a36 <__sflush_r+0xb2>
 8003a32:	2b16      	cmp	r3, #22
 8003a34:	d101      	bne.n	8003a3a <__sflush_r+0xb6>
 8003a36:	602f      	str	r7, [r5, #0]
 8003a38:	e7b1      	b.n	800399e <__sflush_r+0x1a>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	e7ad      	b.n	80039a0 <__sflush_r+0x1c>
 8003a44:	690f      	ldr	r7, [r1, #16]
 8003a46:	2f00      	cmp	r7, #0
 8003a48:	d0a9      	beq.n	800399e <__sflush_r+0x1a>
 8003a4a:	0793      	lsls	r3, r2, #30
 8003a4c:	680e      	ldr	r6, [r1, #0]
 8003a4e:	bf08      	it	eq
 8003a50:	694b      	ldreq	r3, [r1, #20]
 8003a52:	600f      	str	r7, [r1, #0]
 8003a54:	bf18      	it	ne
 8003a56:	2300      	movne	r3, #0
 8003a58:	eba6 0807 	sub.w	r8, r6, r7
 8003a5c:	608b      	str	r3, [r1, #8]
 8003a5e:	f1b8 0f00 	cmp.w	r8, #0
 8003a62:	dd9c      	ble.n	800399e <__sflush_r+0x1a>
 8003a64:	6a21      	ldr	r1, [r4, #32]
 8003a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a68:	4643      	mov	r3, r8
 8003a6a:	463a      	mov	r2, r7
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	47b0      	blx	r6
 8003a70:	2800      	cmp	r0, #0
 8003a72:	dc06      	bgt.n	8003a82 <__sflush_r+0xfe>
 8003a74:	89a3      	ldrh	r3, [r4, #12]
 8003a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a7a:	81a3      	strh	r3, [r4, #12]
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a80:	e78e      	b.n	80039a0 <__sflush_r+0x1c>
 8003a82:	4407      	add	r7, r0
 8003a84:	eba8 0800 	sub.w	r8, r8, r0
 8003a88:	e7e9      	b.n	8003a5e <__sflush_r+0xda>
 8003a8a:	bf00      	nop
 8003a8c:	20400001 	.word	0x20400001

08003a90 <_fflush_r>:
 8003a90:	b538      	push	{r3, r4, r5, lr}
 8003a92:	690b      	ldr	r3, [r1, #16]
 8003a94:	4605      	mov	r5, r0
 8003a96:	460c      	mov	r4, r1
 8003a98:	b913      	cbnz	r3, 8003aa0 <_fflush_r+0x10>
 8003a9a:	2500      	movs	r5, #0
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	bd38      	pop	{r3, r4, r5, pc}
 8003aa0:	b118      	cbz	r0, 8003aaa <_fflush_r+0x1a>
 8003aa2:	6983      	ldr	r3, [r0, #24]
 8003aa4:	b90b      	cbnz	r3, 8003aaa <_fflush_r+0x1a>
 8003aa6:	f000 f899 	bl	8003bdc <__sinit>
 8003aaa:	4b14      	ldr	r3, [pc, #80]	; (8003afc <_fflush_r+0x6c>)
 8003aac:	429c      	cmp	r4, r3
 8003aae:	d11b      	bne.n	8003ae8 <_fflush_r+0x58>
 8003ab0:	686c      	ldr	r4, [r5, #4]
 8003ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0ef      	beq.n	8003a9a <_fflush_r+0xa>
 8003aba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003abc:	07d0      	lsls	r0, r2, #31
 8003abe:	d404      	bmi.n	8003aca <_fflush_r+0x3a>
 8003ac0:	0599      	lsls	r1, r3, #22
 8003ac2:	d402      	bmi.n	8003aca <_fflush_r+0x3a>
 8003ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ac6:	f000 f94c 	bl	8003d62 <__retarget_lock_acquire_recursive>
 8003aca:	4628      	mov	r0, r5
 8003acc:	4621      	mov	r1, r4
 8003ace:	f7ff ff59 	bl	8003984 <__sflush_r>
 8003ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ad4:	07da      	lsls	r2, r3, #31
 8003ad6:	4605      	mov	r5, r0
 8003ad8:	d4e0      	bmi.n	8003a9c <_fflush_r+0xc>
 8003ada:	89a3      	ldrh	r3, [r4, #12]
 8003adc:	059b      	lsls	r3, r3, #22
 8003ade:	d4dd      	bmi.n	8003a9c <_fflush_r+0xc>
 8003ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ae2:	f000 f93f 	bl	8003d64 <__retarget_lock_release_recursive>
 8003ae6:	e7d9      	b.n	8003a9c <_fflush_r+0xc>
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <_fflush_r+0x70>)
 8003aea:	429c      	cmp	r4, r3
 8003aec:	d101      	bne.n	8003af2 <_fflush_r+0x62>
 8003aee:	68ac      	ldr	r4, [r5, #8]
 8003af0:	e7df      	b.n	8003ab2 <_fflush_r+0x22>
 8003af2:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <_fflush_r+0x74>)
 8003af4:	429c      	cmp	r4, r3
 8003af6:	bf08      	it	eq
 8003af8:	68ec      	ldreq	r4, [r5, #12]
 8003afa:	e7da      	b.n	8003ab2 <_fflush_r+0x22>
 8003afc:	08004a30 	.word	0x08004a30
 8003b00:	08004a50 	.word	0x08004a50
 8003b04:	08004a10 	.word	0x08004a10

08003b08 <fflush>:
 8003b08:	4601      	mov	r1, r0
 8003b0a:	b920      	cbnz	r0, 8003b16 <fflush+0xe>
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <fflush+0x18>)
 8003b0e:	4905      	ldr	r1, [pc, #20]	; (8003b24 <fflush+0x1c>)
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	f000 b8e1 	b.w	8003cd8 <_fwalk_reent>
 8003b16:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <fflush+0x20>)
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	f7ff bfb9 	b.w	8003a90 <_fflush_r>
 8003b1e:	bf00      	nop
 8003b20:	08004a70 	.word	0x08004a70
 8003b24:	08003a91 	.word	0x08003a91
 8003b28:	2000000c 	.word	0x2000000c

08003b2c <std>:
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	b510      	push	{r4, lr}
 8003b30:	4604      	mov	r4, r0
 8003b32:	e9c0 3300 	strd	r3, r3, [r0]
 8003b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b3a:	6083      	str	r3, [r0, #8]
 8003b3c:	8181      	strh	r1, [r0, #12]
 8003b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b40:	81c2      	strh	r2, [r0, #14]
 8003b42:	6183      	str	r3, [r0, #24]
 8003b44:	4619      	mov	r1, r3
 8003b46:	2208      	movs	r2, #8
 8003b48:	305c      	adds	r0, #92	; 0x5c
 8003b4a:	f000 f90c 	bl	8003d66 <memset>
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <std+0x38>)
 8003b50:	6263      	str	r3, [r4, #36]	; 0x24
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <std+0x3c>)
 8003b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <std+0x40>)
 8003b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <std+0x44>)
 8003b5c:	6224      	str	r4, [r4, #32]
 8003b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b60:	bd10      	pop	{r4, pc}
 8003b62:	bf00      	nop
 8003b64:	08003f89 	.word	0x08003f89
 8003b68:	08003fab 	.word	0x08003fab
 8003b6c:	08003fe3 	.word	0x08003fe3
 8003b70:	08004007 	.word	0x08004007

08003b74 <_cleanup_r>:
 8003b74:	4901      	ldr	r1, [pc, #4]	; (8003b7c <_cleanup_r+0x8>)
 8003b76:	f000 b8af 	b.w	8003cd8 <_fwalk_reent>
 8003b7a:	bf00      	nop
 8003b7c:	08003a91 	.word	0x08003a91

08003b80 <__sfmoreglue>:
 8003b80:	b570      	push	{r4, r5, r6, lr}
 8003b82:	2268      	movs	r2, #104	; 0x68
 8003b84:	1e4d      	subs	r5, r1, #1
 8003b86:	4355      	muls	r5, r2
 8003b88:	460e      	mov	r6, r1
 8003b8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b8e:	f000 f95f 	bl	8003e50 <_malloc_r>
 8003b92:	4604      	mov	r4, r0
 8003b94:	b140      	cbz	r0, 8003ba8 <__sfmoreglue+0x28>
 8003b96:	2100      	movs	r1, #0
 8003b98:	e9c0 1600 	strd	r1, r6, [r0]
 8003b9c:	300c      	adds	r0, #12
 8003b9e:	60a0      	str	r0, [r4, #8]
 8003ba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ba4:	f000 f8df 	bl	8003d66 <memset>
 8003ba8:	4620      	mov	r0, r4
 8003baa:	bd70      	pop	{r4, r5, r6, pc}

08003bac <__sfp_lock_acquire>:
 8003bac:	4801      	ldr	r0, [pc, #4]	; (8003bb4 <__sfp_lock_acquire+0x8>)
 8003bae:	f000 b8d8 	b.w	8003d62 <__retarget_lock_acquire_recursive>
 8003bb2:	bf00      	nop
 8003bb4:	20000815 	.word	0x20000815

08003bb8 <__sfp_lock_release>:
 8003bb8:	4801      	ldr	r0, [pc, #4]	; (8003bc0 <__sfp_lock_release+0x8>)
 8003bba:	f000 b8d3 	b.w	8003d64 <__retarget_lock_release_recursive>
 8003bbe:	bf00      	nop
 8003bc0:	20000815 	.word	0x20000815

08003bc4 <__sinit_lock_acquire>:
 8003bc4:	4801      	ldr	r0, [pc, #4]	; (8003bcc <__sinit_lock_acquire+0x8>)
 8003bc6:	f000 b8cc 	b.w	8003d62 <__retarget_lock_acquire_recursive>
 8003bca:	bf00      	nop
 8003bcc:	20000816 	.word	0x20000816

08003bd0 <__sinit_lock_release>:
 8003bd0:	4801      	ldr	r0, [pc, #4]	; (8003bd8 <__sinit_lock_release+0x8>)
 8003bd2:	f000 b8c7 	b.w	8003d64 <__retarget_lock_release_recursive>
 8003bd6:	bf00      	nop
 8003bd8:	20000816 	.word	0x20000816

08003bdc <__sinit>:
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	4604      	mov	r4, r0
 8003be0:	f7ff fff0 	bl	8003bc4 <__sinit_lock_acquire>
 8003be4:	69a3      	ldr	r3, [r4, #24]
 8003be6:	b11b      	cbz	r3, 8003bf0 <__sinit+0x14>
 8003be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bec:	f7ff bff0 	b.w	8003bd0 <__sinit_lock_release>
 8003bf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003bf4:	6523      	str	r3, [r4, #80]	; 0x50
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <__sinit+0x68>)
 8003bf8:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <__sinit+0x6c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8003bfe:	42a3      	cmp	r3, r4
 8003c00:	bf04      	itt	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	61a3      	streq	r3, [r4, #24]
 8003c06:	4620      	mov	r0, r4
 8003c08:	f000 f820 	bl	8003c4c <__sfp>
 8003c0c:	6060      	str	r0, [r4, #4]
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f000 f81c 	bl	8003c4c <__sfp>
 8003c14:	60a0      	str	r0, [r4, #8]
 8003c16:	4620      	mov	r0, r4
 8003c18:	f000 f818 	bl	8003c4c <__sfp>
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	60e0      	str	r0, [r4, #12]
 8003c20:	2104      	movs	r1, #4
 8003c22:	6860      	ldr	r0, [r4, #4]
 8003c24:	f7ff ff82 	bl	8003b2c <std>
 8003c28:	68a0      	ldr	r0, [r4, #8]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	2109      	movs	r1, #9
 8003c2e:	f7ff ff7d 	bl	8003b2c <std>
 8003c32:	68e0      	ldr	r0, [r4, #12]
 8003c34:	2202      	movs	r2, #2
 8003c36:	2112      	movs	r1, #18
 8003c38:	f7ff ff78 	bl	8003b2c <std>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	61a3      	str	r3, [r4, #24]
 8003c40:	e7d2      	b.n	8003be8 <__sinit+0xc>
 8003c42:	bf00      	nop
 8003c44:	08004a70 	.word	0x08004a70
 8003c48:	08003b75 	.word	0x08003b75

08003c4c <__sfp>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	4607      	mov	r7, r0
 8003c50:	f7ff ffac 	bl	8003bac <__sfp_lock_acquire>
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <__sfp+0x84>)
 8003c56:	681e      	ldr	r6, [r3, #0]
 8003c58:	69b3      	ldr	r3, [r6, #24]
 8003c5a:	b913      	cbnz	r3, 8003c62 <__sfp+0x16>
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	f7ff ffbd 	bl	8003bdc <__sinit>
 8003c62:	3648      	adds	r6, #72	; 0x48
 8003c64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	d503      	bpl.n	8003c74 <__sfp+0x28>
 8003c6c:	6833      	ldr	r3, [r6, #0]
 8003c6e:	b30b      	cbz	r3, 8003cb4 <__sfp+0x68>
 8003c70:	6836      	ldr	r6, [r6, #0]
 8003c72:	e7f7      	b.n	8003c64 <__sfp+0x18>
 8003c74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c78:	b9d5      	cbnz	r5, 8003cb0 <__sfp+0x64>
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <__sfp+0x88>)
 8003c7c:	60e3      	str	r3, [r4, #12]
 8003c7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c82:	6665      	str	r5, [r4, #100]	; 0x64
 8003c84:	f000 f86c 	bl	8003d60 <__retarget_lock_init_recursive>
 8003c88:	f7ff ff96 	bl	8003bb8 <__sfp_lock_release>
 8003c8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c94:	6025      	str	r5, [r4, #0]
 8003c96:	61a5      	str	r5, [r4, #24]
 8003c98:	2208      	movs	r2, #8
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ca0:	f000 f861 	bl	8003d66 <memset>
 8003ca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003cac:	4620      	mov	r0, r4
 8003cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb0:	3468      	adds	r4, #104	; 0x68
 8003cb2:	e7d9      	b.n	8003c68 <__sfp+0x1c>
 8003cb4:	2104      	movs	r1, #4
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f7ff ff62 	bl	8003b80 <__sfmoreglue>
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	6030      	str	r0, [r6, #0]
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d1d5      	bne.n	8003c70 <__sfp+0x24>
 8003cc4:	f7ff ff78 	bl	8003bb8 <__sfp_lock_release>
 8003cc8:	230c      	movs	r3, #12
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	e7ee      	b.n	8003cac <__sfp+0x60>
 8003cce:	bf00      	nop
 8003cd0:	08004a70 	.word	0x08004a70
 8003cd4:	ffff0001 	.word	0xffff0001

08003cd8 <_fwalk_reent>:
 8003cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cdc:	4606      	mov	r6, r0
 8003cde:	4688      	mov	r8, r1
 8003ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ce4:	2700      	movs	r7, #0
 8003ce6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cea:	f1b9 0901 	subs.w	r9, r9, #1
 8003cee:	d505      	bpl.n	8003cfc <_fwalk_reent+0x24>
 8003cf0:	6824      	ldr	r4, [r4, #0]
 8003cf2:	2c00      	cmp	r4, #0
 8003cf4:	d1f7      	bne.n	8003ce6 <_fwalk_reent+0xe>
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cfc:	89ab      	ldrh	r3, [r5, #12]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d907      	bls.n	8003d12 <_fwalk_reent+0x3a>
 8003d02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d06:	3301      	adds	r3, #1
 8003d08:	d003      	beq.n	8003d12 <_fwalk_reent+0x3a>
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	47c0      	blx	r8
 8003d10:	4307      	orrs	r7, r0
 8003d12:	3568      	adds	r5, #104	; 0x68
 8003d14:	e7e9      	b.n	8003cea <_fwalk_reent+0x12>
	...

08003d18 <__libc_init_array>:
 8003d18:	b570      	push	{r4, r5, r6, lr}
 8003d1a:	4d0d      	ldr	r5, [pc, #52]	; (8003d50 <__libc_init_array+0x38>)
 8003d1c:	4c0d      	ldr	r4, [pc, #52]	; (8003d54 <__libc_init_array+0x3c>)
 8003d1e:	1b64      	subs	r4, r4, r5
 8003d20:	10a4      	asrs	r4, r4, #2
 8003d22:	2600      	movs	r6, #0
 8003d24:	42a6      	cmp	r6, r4
 8003d26:	d109      	bne.n	8003d3c <__libc_init_array+0x24>
 8003d28:	4d0b      	ldr	r5, [pc, #44]	; (8003d58 <__libc_init_array+0x40>)
 8003d2a:	4c0c      	ldr	r4, [pc, #48]	; (8003d5c <__libc_init_array+0x44>)
 8003d2c:	f000 fdf8 	bl	8004920 <_init>
 8003d30:	1b64      	subs	r4, r4, r5
 8003d32:	10a4      	asrs	r4, r4, #2
 8003d34:	2600      	movs	r6, #0
 8003d36:	42a6      	cmp	r6, r4
 8003d38:	d105      	bne.n	8003d46 <__libc_init_array+0x2e>
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
 8003d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d40:	4798      	blx	r3
 8003d42:	3601      	adds	r6, #1
 8003d44:	e7ee      	b.n	8003d24 <__libc_init_array+0xc>
 8003d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4a:	4798      	blx	r3
 8003d4c:	3601      	adds	r6, #1
 8003d4e:	e7f2      	b.n	8003d36 <__libc_init_array+0x1e>
 8003d50:	08004ab0 	.word	0x08004ab0
 8003d54:	08004ab0 	.word	0x08004ab0
 8003d58:	08004ab0 	.word	0x08004ab0
 8003d5c:	08004ab4 	.word	0x08004ab4

08003d60 <__retarget_lock_init_recursive>:
 8003d60:	4770      	bx	lr

08003d62 <__retarget_lock_acquire_recursive>:
 8003d62:	4770      	bx	lr

08003d64 <__retarget_lock_release_recursive>:
 8003d64:	4770      	bx	lr

08003d66 <memset>:
 8003d66:	4402      	add	r2, r0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d100      	bne.n	8003d70 <memset+0xa>
 8003d6e:	4770      	bx	lr
 8003d70:	f803 1b01 	strb.w	r1, [r3], #1
 8003d74:	e7f9      	b.n	8003d6a <memset+0x4>
	...

08003d78 <_free_r>:
 8003d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d7a:	2900      	cmp	r1, #0
 8003d7c:	d044      	beq.n	8003e08 <_free_r+0x90>
 8003d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d82:	9001      	str	r0, [sp, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f1a1 0404 	sub.w	r4, r1, #4
 8003d8a:	bfb8      	it	lt
 8003d8c:	18e4      	addlt	r4, r4, r3
 8003d8e:	f000 f973 	bl	8004078 <__malloc_lock>
 8003d92:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <_free_r+0x94>)
 8003d94:	9801      	ldr	r0, [sp, #4]
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	b933      	cbnz	r3, 8003da8 <_free_r+0x30>
 8003d9a:	6063      	str	r3, [r4, #4]
 8003d9c:	6014      	str	r4, [r2, #0]
 8003d9e:	b003      	add	sp, #12
 8003da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003da4:	f000 b96e 	b.w	8004084 <__malloc_unlock>
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d908      	bls.n	8003dbe <_free_r+0x46>
 8003dac:	6825      	ldr	r5, [r4, #0]
 8003dae:	1961      	adds	r1, r4, r5
 8003db0:	428b      	cmp	r3, r1
 8003db2:	bf01      	itttt	eq
 8003db4:	6819      	ldreq	r1, [r3, #0]
 8003db6:	685b      	ldreq	r3, [r3, #4]
 8003db8:	1949      	addeq	r1, r1, r5
 8003dba:	6021      	streq	r1, [r4, #0]
 8003dbc:	e7ed      	b.n	8003d9a <_free_r+0x22>
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	b10b      	cbz	r3, 8003dc8 <_free_r+0x50>
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	d9fa      	bls.n	8003dbe <_free_r+0x46>
 8003dc8:	6811      	ldr	r1, [r2, #0]
 8003dca:	1855      	adds	r5, r2, r1
 8003dcc:	42a5      	cmp	r5, r4
 8003dce:	d10b      	bne.n	8003de8 <_free_r+0x70>
 8003dd0:	6824      	ldr	r4, [r4, #0]
 8003dd2:	4421      	add	r1, r4
 8003dd4:	1854      	adds	r4, r2, r1
 8003dd6:	42a3      	cmp	r3, r4
 8003dd8:	6011      	str	r1, [r2, #0]
 8003dda:	d1e0      	bne.n	8003d9e <_free_r+0x26>
 8003ddc:	681c      	ldr	r4, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	6053      	str	r3, [r2, #4]
 8003de2:	4421      	add	r1, r4
 8003de4:	6011      	str	r1, [r2, #0]
 8003de6:	e7da      	b.n	8003d9e <_free_r+0x26>
 8003de8:	d902      	bls.n	8003df0 <_free_r+0x78>
 8003dea:	230c      	movs	r3, #12
 8003dec:	6003      	str	r3, [r0, #0]
 8003dee:	e7d6      	b.n	8003d9e <_free_r+0x26>
 8003df0:	6825      	ldr	r5, [r4, #0]
 8003df2:	1961      	adds	r1, r4, r5
 8003df4:	428b      	cmp	r3, r1
 8003df6:	bf04      	itt	eq
 8003df8:	6819      	ldreq	r1, [r3, #0]
 8003dfa:	685b      	ldreq	r3, [r3, #4]
 8003dfc:	6063      	str	r3, [r4, #4]
 8003dfe:	bf04      	itt	eq
 8003e00:	1949      	addeq	r1, r1, r5
 8003e02:	6021      	streq	r1, [r4, #0]
 8003e04:	6054      	str	r4, [r2, #4]
 8003e06:	e7ca      	b.n	8003d9e <_free_r+0x26>
 8003e08:	b003      	add	sp, #12
 8003e0a:	bd30      	pop	{r4, r5, pc}
 8003e0c:	20000818 	.word	0x20000818

08003e10 <sbrk_aligned>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	4e0e      	ldr	r6, [pc, #56]	; (8003e4c <sbrk_aligned+0x3c>)
 8003e14:	460c      	mov	r4, r1
 8003e16:	6831      	ldr	r1, [r6, #0]
 8003e18:	4605      	mov	r5, r0
 8003e1a:	b911      	cbnz	r1, 8003e22 <sbrk_aligned+0x12>
 8003e1c:	f000 f8a4 	bl	8003f68 <_sbrk_r>
 8003e20:	6030      	str	r0, [r6, #0]
 8003e22:	4621      	mov	r1, r4
 8003e24:	4628      	mov	r0, r5
 8003e26:	f000 f89f 	bl	8003f68 <_sbrk_r>
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	d00a      	beq.n	8003e44 <sbrk_aligned+0x34>
 8003e2e:	1cc4      	adds	r4, r0, #3
 8003e30:	f024 0403 	bic.w	r4, r4, #3
 8003e34:	42a0      	cmp	r0, r4
 8003e36:	d007      	beq.n	8003e48 <sbrk_aligned+0x38>
 8003e38:	1a21      	subs	r1, r4, r0
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f000 f894 	bl	8003f68 <_sbrk_r>
 8003e40:	3001      	adds	r0, #1
 8003e42:	d101      	bne.n	8003e48 <sbrk_aligned+0x38>
 8003e44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003e48:	4620      	mov	r0, r4
 8003e4a:	bd70      	pop	{r4, r5, r6, pc}
 8003e4c:	2000081c 	.word	0x2000081c

08003e50 <_malloc_r>:
 8003e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e54:	1ccd      	adds	r5, r1, #3
 8003e56:	f025 0503 	bic.w	r5, r5, #3
 8003e5a:	3508      	adds	r5, #8
 8003e5c:	2d0c      	cmp	r5, #12
 8003e5e:	bf38      	it	cc
 8003e60:	250c      	movcc	r5, #12
 8003e62:	2d00      	cmp	r5, #0
 8003e64:	4607      	mov	r7, r0
 8003e66:	db01      	blt.n	8003e6c <_malloc_r+0x1c>
 8003e68:	42a9      	cmp	r1, r5
 8003e6a:	d905      	bls.n	8003e78 <_malloc_r+0x28>
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	2600      	movs	r6, #0
 8003e72:	4630      	mov	r0, r6
 8003e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e78:	4e2e      	ldr	r6, [pc, #184]	; (8003f34 <_malloc_r+0xe4>)
 8003e7a:	f000 f8fd 	bl	8004078 <__malloc_lock>
 8003e7e:	6833      	ldr	r3, [r6, #0]
 8003e80:	461c      	mov	r4, r3
 8003e82:	bb34      	cbnz	r4, 8003ed2 <_malloc_r+0x82>
 8003e84:	4629      	mov	r1, r5
 8003e86:	4638      	mov	r0, r7
 8003e88:	f7ff ffc2 	bl	8003e10 <sbrk_aligned>
 8003e8c:	1c43      	adds	r3, r0, #1
 8003e8e:	4604      	mov	r4, r0
 8003e90:	d14d      	bne.n	8003f2e <_malloc_r+0xde>
 8003e92:	6834      	ldr	r4, [r6, #0]
 8003e94:	4626      	mov	r6, r4
 8003e96:	2e00      	cmp	r6, #0
 8003e98:	d140      	bne.n	8003f1c <_malloc_r+0xcc>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	4631      	mov	r1, r6
 8003e9e:	4638      	mov	r0, r7
 8003ea0:	eb04 0803 	add.w	r8, r4, r3
 8003ea4:	f000 f860 	bl	8003f68 <_sbrk_r>
 8003ea8:	4580      	cmp	r8, r0
 8003eaa:	d13a      	bne.n	8003f22 <_malloc_r+0xd2>
 8003eac:	6821      	ldr	r1, [r4, #0]
 8003eae:	3503      	adds	r5, #3
 8003eb0:	1a6d      	subs	r5, r5, r1
 8003eb2:	f025 0503 	bic.w	r5, r5, #3
 8003eb6:	3508      	adds	r5, #8
 8003eb8:	2d0c      	cmp	r5, #12
 8003eba:	bf38      	it	cc
 8003ebc:	250c      	movcc	r5, #12
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	4638      	mov	r0, r7
 8003ec2:	f7ff ffa5 	bl	8003e10 <sbrk_aligned>
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	d02b      	beq.n	8003f22 <_malloc_r+0xd2>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	442b      	add	r3, r5
 8003ece:	6023      	str	r3, [r4, #0]
 8003ed0:	e00e      	b.n	8003ef0 <_malloc_r+0xa0>
 8003ed2:	6822      	ldr	r2, [r4, #0]
 8003ed4:	1b52      	subs	r2, r2, r5
 8003ed6:	d41e      	bmi.n	8003f16 <_malloc_r+0xc6>
 8003ed8:	2a0b      	cmp	r2, #11
 8003eda:	d916      	bls.n	8003f0a <_malloc_r+0xba>
 8003edc:	1961      	adds	r1, r4, r5
 8003ede:	42a3      	cmp	r3, r4
 8003ee0:	6025      	str	r5, [r4, #0]
 8003ee2:	bf18      	it	ne
 8003ee4:	6059      	strne	r1, [r3, #4]
 8003ee6:	6863      	ldr	r3, [r4, #4]
 8003ee8:	bf08      	it	eq
 8003eea:	6031      	streq	r1, [r6, #0]
 8003eec:	5162      	str	r2, [r4, r5]
 8003eee:	604b      	str	r3, [r1, #4]
 8003ef0:	4638      	mov	r0, r7
 8003ef2:	f104 060b 	add.w	r6, r4, #11
 8003ef6:	f000 f8c5 	bl	8004084 <__malloc_unlock>
 8003efa:	f026 0607 	bic.w	r6, r6, #7
 8003efe:	1d23      	adds	r3, r4, #4
 8003f00:	1af2      	subs	r2, r6, r3
 8003f02:	d0b6      	beq.n	8003e72 <_malloc_r+0x22>
 8003f04:	1b9b      	subs	r3, r3, r6
 8003f06:	50a3      	str	r3, [r4, r2]
 8003f08:	e7b3      	b.n	8003e72 <_malloc_r+0x22>
 8003f0a:	6862      	ldr	r2, [r4, #4]
 8003f0c:	42a3      	cmp	r3, r4
 8003f0e:	bf0c      	ite	eq
 8003f10:	6032      	streq	r2, [r6, #0]
 8003f12:	605a      	strne	r2, [r3, #4]
 8003f14:	e7ec      	b.n	8003ef0 <_malloc_r+0xa0>
 8003f16:	4623      	mov	r3, r4
 8003f18:	6864      	ldr	r4, [r4, #4]
 8003f1a:	e7b2      	b.n	8003e82 <_malloc_r+0x32>
 8003f1c:	4634      	mov	r4, r6
 8003f1e:	6876      	ldr	r6, [r6, #4]
 8003f20:	e7b9      	b.n	8003e96 <_malloc_r+0x46>
 8003f22:	230c      	movs	r3, #12
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	4638      	mov	r0, r7
 8003f28:	f000 f8ac 	bl	8004084 <__malloc_unlock>
 8003f2c:	e7a1      	b.n	8003e72 <_malloc_r+0x22>
 8003f2e:	6025      	str	r5, [r4, #0]
 8003f30:	e7de      	b.n	8003ef0 <_malloc_r+0xa0>
 8003f32:	bf00      	nop
 8003f34:	20000818 	.word	0x20000818

08003f38 <iprintf>:
 8003f38:	b40f      	push	{r0, r1, r2, r3}
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <iprintf+0x2c>)
 8003f3c:	b513      	push	{r0, r1, r4, lr}
 8003f3e:	681c      	ldr	r4, [r3, #0]
 8003f40:	b124      	cbz	r4, 8003f4c <iprintf+0x14>
 8003f42:	69a3      	ldr	r3, [r4, #24]
 8003f44:	b913      	cbnz	r3, 8003f4c <iprintf+0x14>
 8003f46:	4620      	mov	r0, r4
 8003f48:	f7ff fe48 	bl	8003bdc <__sinit>
 8003f4c:	ab05      	add	r3, sp, #20
 8003f4e:	9a04      	ldr	r2, [sp, #16]
 8003f50:	68a1      	ldr	r1, [r4, #8]
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	4620      	mov	r0, r4
 8003f56:	f000 f8c5 	bl	80040e4 <_vfiprintf_r>
 8003f5a:	b002      	add	sp, #8
 8003f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f60:	b004      	add	sp, #16
 8003f62:	4770      	bx	lr
 8003f64:	2000000c 	.word	0x2000000c

08003f68 <_sbrk_r>:
 8003f68:	b538      	push	{r3, r4, r5, lr}
 8003f6a:	4d06      	ldr	r5, [pc, #24]	; (8003f84 <_sbrk_r+0x1c>)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	4604      	mov	r4, r0
 8003f70:	4608      	mov	r0, r1
 8003f72:	602b      	str	r3, [r5, #0]
 8003f74:	f7fd f9be 	bl	80012f4 <_sbrk>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_sbrk_r+0x1a>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_sbrk_r+0x1a>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	20000820 	.word	0x20000820

08003f88 <__sread>:
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f90:	f000 fb6c 	bl	800466c <_read_r>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	bfab      	itete	ge
 8003f98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f9c:	181b      	addge	r3, r3, r0
 8003f9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fa2:	bfac      	ite	ge
 8003fa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fa6:	81a3      	strhlt	r3, [r4, #12]
 8003fa8:	bd10      	pop	{r4, pc}

08003faa <__swrite>:
 8003faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fae:	461f      	mov	r7, r3
 8003fb0:	898b      	ldrh	r3, [r1, #12]
 8003fb2:	05db      	lsls	r3, r3, #23
 8003fb4:	4605      	mov	r5, r0
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	4616      	mov	r6, r2
 8003fba:	d505      	bpl.n	8003fc8 <__swrite+0x1e>
 8003fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f000 f846 	bl	8004054 <_lseek_r>
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd2:	81a3      	strh	r3, [r4, #12]
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	4628      	mov	r0, r5
 8003fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fde:	f000 b817 	b.w	8004010 <_write_r>

08003fe2 <__sseek>:
 8003fe2:	b510      	push	{r4, lr}
 8003fe4:	460c      	mov	r4, r1
 8003fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fea:	f000 f833 	bl	8004054 <_lseek_r>
 8003fee:	1c43      	adds	r3, r0, #1
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	bf15      	itete	ne
 8003ff4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ffe:	81a3      	strheq	r3, [r4, #12]
 8004000:	bf18      	it	ne
 8004002:	81a3      	strhne	r3, [r4, #12]
 8004004:	bd10      	pop	{r4, pc}

08004006 <__sclose>:
 8004006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800400a:	f000 b813 	b.w	8004034 <_close_r>
	...

08004010 <_write_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4d07      	ldr	r5, [pc, #28]	; (8004030 <_write_r+0x20>)
 8004014:	4604      	mov	r4, r0
 8004016:	4608      	mov	r0, r1
 8004018:	4611      	mov	r1, r2
 800401a:	2200      	movs	r2, #0
 800401c:	602a      	str	r2, [r5, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	f7fd f918 	bl	8001254 <_write>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d102      	bne.n	800402e <_write_r+0x1e>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	b103      	cbz	r3, 800402e <_write_r+0x1e>
 800402c:	6023      	str	r3, [r4, #0]
 800402e:	bd38      	pop	{r3, r4, r5, pc}
 8004030:	20000820 	.word	0x20000820

08004034 <_close_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	4d06      	ldr	r5, [pc, #24]	; (8004050 <_close_r+0x1c>)
 8004038:	2300      	movs	r3, #0
 800403a:	4604      	mov	r4, r0
 800403c:	4608      	mov	r0, r1
 800403e:	602b      	str	r3, [r5, #0]
 8004040:	f7fd f924 	bl	800128c <_close>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d102      	bne.n	800404e <_close_r+0x1a>
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	b103      	cbz	r3, 800404e <_close_r+0x1a>
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	20000820 	.word	0x20000820

08004054 <_lseek_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4d07      	ldr	r5, [pc, #28]	; (8004074 <_lseek_r+0x20>)
 8004058:	4604      	mov	r4, r0
 800405a:	4608      	mov	r0, r1
 800405c:	4611      	mov	r1, r2
 800405e:	2200      	movs	r2, #0
 8004060:	602a      	str	r2, [r5, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	f7fd f939 	bl	80012da <_lseek>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d102      	bne.n	8004072 <_lseek_r+0x1e>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	b103      	cbz	r3, 8004072 <_lseek_r+0x1e>
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	bd38      	pop	{r3, r4, r5, pc}
 8004074:	20000820 	.word	0x20000820

08004078 <__malloc_lock>:
 8004078:	4801      	ldr	r0, [pc, #4]	; (8004080 <__malloc_lock+0x8>)
 800407a:	f7ff be72 	b.w	8003d62 <__retarget_lock_acquire_recursive>
 800407e:	bf00      	nop
 8004080:	20000814 	.word	0x20000814

08004084 <__malloc_unlock>:
 8004084:	4801      	ldr	r0, [pc, #4]	; (800408c <__malloc_unlock+0x8>)
 8004086:	f7ff be6d 	b.w	8003d64 <__retarget_lock_release_recursive>
 800408a:	bf00      	nop
 800408c:	20000814 	.word	0x20000814

08004090 <__sfputc_r>:
 8004090:	6893      	ldr	r3, [r2, #8]
 8004092:	3b01      	subs	r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	b410      	push	{r4}
 8004098:	6093      	str	r3, [r2, #8]
 800409a:	da08      	bge.n	80040ae <__sfputc_r+0x1e>
 800409c:	6994      	ldr	r4, [r2, #24]
 800409e:	42a3      	cmp	r3, r4
 80040a0:	db01      	blt.n	80040a6 <__sfputc_r+0x16>
 80040a2:	290a      	cmp	r1, #10
 80040a4:	d103      	bne.n	80040ae <__sfputc_r+0x1e>
 80040a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040aa:	f000 baf1 	b.w	8004690 <__swbuf_r>
 80040ae:	6813      	ldr	r3, [r2, #0]
 80040b0:	1c58      	adds	r0, r3, #1
 80040b2:	6010      	str	r0, [r2, #0]
 80040b4:	7019      	strb	r1, [r3, #0]
 80040b6:	4608      	mov	r0, r1
 80040b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040bc:	4770      	bx	lr

080040be <__sfputs_r>:
 80040be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c0:	4606      	mov	r6, r0
 80040c2:	460f      	mov	r7, r1
 80040c4:	4614      	mov	r4, r2
 80040c6:	18d5      	adds	r5, r2, r3
 80040c8:	42ac      	cmp	r4, r5
 80040ca:	d101      	bne.n	80040d0 <__sfputs_r+0x12>
 80040cc:	2000      	movs	r0, #0
 80040ce:	e007      	b.n	80040e0 <__sfputs_r+0x22>
 80040d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d4:	463a      	mov	r2, r7
 80040d6:	4630      	mov	r0, r6
 80040d8:	f7ff ffda 	bl	8004090 <__sfputc_r>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d1f3      	bne.n	80040c8 <__sfputs_r+0xa>
 80040e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040e4 <_vfiprintf_r>:
 80040e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e8:	460d      	mov	r5, r1
 80040ea:	b09d      	sub	sp, #116	; 0x74
 80040ec:	4614      	mov	r4, r2
 80040ee:	4698      	mov	r8, r3
 80040f0:	4606      	mov	r6, r0
 80040f2:	b118      	cbz	r0, 80040fc <_vfiprintf_r+0x18>
 80040f4:	6983      	ldr	r3, [r0, #24]
 80040f6:	b90b      	cbnz	r3, 80040fc <_vfiprintf_r+0x18>
 80040f8:	f7ff fd70 	bl	8003bdc <__sinit>
 80040fc:	4b89      	ldr	r3, [pc, #548]	; (8004324 <_vfiprintf_r+0x240>)
 80040fe:	429d      	cmp	r5, r3
 8004100:	d11b      	bne.n	800413a <_vfiprintf_r+0x56>
 8004102:	6875      	ldr	r5, [r6, #4]
 8004104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004106:	07d9      	lsls	r1, r3, #31
 8004108:	d405      	bmi.n	8004116 <_vfiprintf_r+0x32>
 800410a:	89ab      	ldrh	r3, [r5, #12]
 800410c:	059a      	lsls	r2, r3, #22
 800410e:	d402      	bmi.n	8004116 <_vfiprintf_r+0x32>
 8004110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004112:	f7ff fe26 	bl	8003d62 <__retarget_lock_acquire_recursive>
 8004116:	89ab      	ldrh	r3, [r5, #12]
 8004118:	071b      	lsls	r3, r3, #28
 800411a:	d501      	bpl.n	8004120 <_vfiprintf_r+0x3c>
 800411c:	692b      	ldr	r3, [r5, #16]
 800411e:	b9eb      	cbnz	r3, 800415c <_vfiprintf_r+0x78>
 8004120:	4629      	mov	r1, r5
 8004122:	4630      	mov	r0, r6
 8004124:	f000 fb06 	bl	8004734 <__swsetup_r>
 8004128:	b1c0      	cbz	r0, 800415c <_vfiprintf_r+0x78>
 800412a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800412c:	07dc      	lsls	r4, r3, #31
 800412e:	d50e      	bpl.n	800414e <_vfiprintf_r+0x6a>
 8004130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004134:	b01d      	add	sp, #116	; 0x74
 8004136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800413a:	4b7b      	ldr	r3, [pc, #492]	; (8004328 <_vfiprintf_r+0x244>)
 800413c:	429d      	cmp	r5, r3
 800413e:	d101      	bne.n	8004144 <_vfiprintf_r+0x60>
 8004140:	68b5      	ldr	r5, [r6, #8]
 8004142:	e7df      	b.n	8004104 <_vfiprintf_r+0x20>
 8004144:	4b79      	ldr	r3, [pc, #484]	; (800432c <_vfiprintf_r+0x248>)
 8004146:	429d      	cmp	r5, r3
 8004148:	bf08      	it	eq
 800414a:	68f5      	ldreq	r5, [r6, #12]
 800414c:	e7da      	b.n	8004104 <_vfiprintf_r+0x20>
 800414e:	89ab      	ldrh	r3, [r5, #12]
 8004150:	0598      	lsls	r0, r3, #22
 8004152:	d4ed      	bmi.n	8004130 <_vfiprintf_r+0x4c>
 8004154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004156:	f7ff fe05 	bl	8003d64 <__retarget_lock_release_recursive>
 800415a:	e7e9      	b.n	8004130 <_vfiprintf_r+0x4c>
 800415c:	2300      	movs	r3, #0
 800415e:	9309      	str	r3, [sp, #36]	; 0x24
 8004160:	2320      	movs	r3, #32
 8004162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004166:	f8cd 800c 	str.w	r8, [sp, #12]
 800416a:	2330      	movs	r3, #48	; 0x30
 800416c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004330 <_vfiprintf_r+0x24c>
 8004170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004174:	f04f 0901 	mov.w	r9, #1
 8004178:	4623      	mov	r3, r4
 800417a:	469a      	mov	sl, r3
 800417c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004180:	b10a      	cbz	r2, 8004186 <_vfiprintf_r+0xa2>
 8004182:	2a25      	cmp	r2, #37	; 0x25
 8004184:	d1f9      	bne.n	800417a <_vfiprintf_r+0x96>
 8004186:	ebba 0b04 	subs.w	fp, sl, r4
 800418a:	d00b      	beq.n	80041a4 <_vfiprintf_r+0xc0>
 800418c:	465b      	mov	r3, fp
 800418e:	4622      	mov	r2, r4
 8004190:	4629      	mov	r1, r5
 8004192:	4630      	mov	r0, r6
 8004194:	f7ff ff93 	bl	80040be <__sfputs_r>
 8004198:	3001      	adds	r0, #1
 800419a:	f000 80aa 	beq.w	80042f2 <_vfiprintf_r+0x20e>
 800419e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041a0:	445a      	add	r2, fp
 80041a2:	9209      	str	r2, [sp, #36]	; 0x24
 80041a4:	f89a 3000 	ldrb.w	r3, [sl]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80a2 	beq.w	80042f2 <_vfiprintf_r+0x20e>
 80041ae:	2300      	movs	r3, #0
 80041b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041b8:	f10a 0a01 	add.w	sl, sl, #1
 80041bc:	9304      	str	r3, [sp, #16]
 80041be:	9307      	str	r3, [sp, #28]
 80041c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041c4:	931a      	str	r3, [sp, #104]	; 0x68
 80041c6:	4654      	mov	r4, sl
 80041c8:	2205      	movs	r2, #5
 80041ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041ce:	4858      	ldr	r0, [pc, #352]	; (8004330 <_vfiprintf_r+0x24c>)
 80041d0:	f7fc f8be 	bl	8000350 <memchr>
 80041d4:	9a04      	ldr	r2, [sp, #16]
 80041d6:	b9d8      	cbnz	r0, 8004210 <_vfiprintf_r+0x12c>
 80041d8:	06d1      	lsls	r1, r2, #27
 80041da:	bf44      	itt	mi
 80041dc:	2320      	movmi	r3, #32
 80041de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041e2:	0713      	lsls	r3, r2, #28
 80041e4:	bf44      	itt	mi
 80041e6:	232b      	movmi	r3, #43	; 0x2b
 80041e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041ec:	f89a 3000 	ldrb.w	r3, [sl]
 80041f0:	2b2a      	cmp	r3, #42	; 0x2a
 80041f2:	d015      	beq.n	8004220 <_vfiprintf_r+0x13c>
 80041f4:	9a07      	ldr	r2, [sp, #28]
 80041f6:	4654      	mov	r4, sl
 80041f8:	2000      	movs	r0, #0
 80041fa:	f04f 0c0a 	mov.w	ip, #10
 80041fe:	4621      	mov	r1, r4
 8004200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004204:	3b30      	subs	r3, #48	; 0x30
 8004206:	2b09      	cmp	r3, #9
 8004208:	d94e      	bls.n	80042a8 <_vfiprintf_r+0x1c4>
 800420a:	b1b0      	cbz	r0, 800423a <_vfiprintf_r+0x156>
 800420c:	9207      	str	r2, [sp, #28]
 800420e:	e014      	b.n	800423a <_vfiprintf_r+0x156>
 8004210:	eba0 0308 	sub.w	r3, r0, r8
 8004214:	fa09 f303 	lsl.w	r3, r9, r3
 8004218:	4313      	orrs	r3, r2
 800421a:	9304      	str	r3, [sp, #16]
 800421c:	46a2      	mov	sl, r4
 800421e:	e7d2      	b.n	80041c6 <_vfiprintf_r+0xe2>
 8004220:	9b03      	ldr	r3, [sp, #12]
 8004222:	1d19      	adds	r1, r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	9103      	str	r1, [sp, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	bfbb      	ittet	lt
 800422c:	425b      	neglt	r3, r3
 800422e:	f042 0202 	orrlt.w	r2, r2, #2
 8004232:	9307      	strge	r3, [sp, #28]
 8004234:	9307      	strlt	r3, [sp, #28]
 8004236:	bfb8      	it	lt
 8004238:	9204      	strlt	r2, [sp, #16]
 800423a:	7823      	ldrb	r3, [r4, #0]
 800423c:	2b2e      	cmp	r3, #46	; 0x2e
 800423e:	d10c      	bne.n	800425a <_vfiprintf_r+0x176>
 8004240:	7863      	ldrb	r3, [r4, #1]
 8004242:	2b2a      	cmp	r3, #42	; 0x2a
 8004244:	d135      	bne.n	80042b2 <_vfiprintf_r+0x1ce>
 8004246:	9b03      	ldr	r3, [sp, #12]
 8004248:	1d1a      	adds	r2, r3, #4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	9203      	str	r2, [sp, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	bfb8      	it	lt
 8004252:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004256:	3402      	adds	r4, #2
 8004258:	9305      	str	r3, [sp, #20]
 800425a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004340 <_vfiprintf_r+0x25c>
 800425e:	7821      	ldrb	r1, [r4, #0]
 8004260:	2203      	movs	r2, #3
 8004262:	4650      	mov	r0, sl
 8004264:	f7fc f874 	bl	8000350 <memchr>
 8004268:	b140      	cbz	r0, 800427c <_vfiprintf_r+0x198>
 800426a:	2340      	movs	r3, #64	; 0x40
 800426c:	eba0 000a 	sub.w	r0, r0, sl
 8004270:	fa03 f000 	lsl.w	r0, r3, r0
 8004274:	9b04      	ldr	r3, [sp, #16]
 8004276:	4303      	orrs	r3, r0
 8004278:	3401      	adds	r4, #1
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004280:	482c      	ldr	r0, [pc, #176]	; (8004334 <_vfiprintf_r+0x250>)
 8004282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004286:	2206      	movs	r2, #6
 8004288:	f7fc f862 	bl	8000350 <memchr>
 800428c:	2800      	cmp	r0, #0
 800428e:	d03f      	beq.n	8004310 <_vfiprintf_r+0x22c>
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <_vfiprintf_r+0x254>)
 8004292:	bb1b      	cbnz	r3, 80042dc <_vfiprintf_r+0x1f8>
 8004294:	9b03      	ldr	r3, [sp, #12]
 8004296:	3307      	adds	r3, #7
 8004298:	f023 0307 	bic.w	r3, r3, #7
 800429c:	3308      	adds	r3, #8
 800429e:	9303      	str	r3, [sp, #12]
 80042a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a2:	443b      	add	r3, r7
 80042a4:	9309      	str	r3, [sp, #36]	; 0x24
 80042a6:	e767      	b.n	8004178 <_vfiprintf_r+0x94>
 80042a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80042ac:	460c      	mov	r4, r1
 80042ae:	2001      	movs	r0, #1
 80042b0:	e7a5      	b.n	80041fe <_vfiprintf_r+0x11a>
 80042b2:	2300      	movs	r3, #0
 80042b4:	3401      	adds	r4, #1
 80042b6:	9305      	str	r3, [sp, #20]
 80042b8:	4619      	mov	r1, r3
 80042ba:	f04f 0c0a 	mov.w	ip, #10
 80042be:	4620      	mov	r0, r4
 80042c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042c4:	3a30      	subs	r2, #48	; 0x30
 80042c6:	2a09      	cmp	r2, #9
 80042c8:	d903      	bls.n	80042d2 <_vfiprintf_r+0x1ee>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0c5      	beq.n	800425a <_vfiprintf_r+0x176>
 80042ce:	9105      	str	r1, [sp, #20]
 80042d0:	e7c3      	b.n	800425a <_vfiprintf_r+0x176>
 80042d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80042d6:	4604      	mov	r4, r0
 80042d8:	2301      	movs	r3, #1
 80042da:	e7f0      	b.n	80042be <_vfiprintf_r+0x1da>
 80042dc:	ab03      	add	r3, sp, #12
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	462a      	mov	r2, r5
 80042e2:	4b16      	ldr	r3, [pc, #88]	; (800433c <_vfiprintf_r+0x258>)
 80042e4:	a904      	add	r1, sp, #16
 80042e6:	4630      	mov	r0, r6
 80042e8:	f3af 8000 	nop.w
 80042ec:	4607      	mov	r7, r0
 80042ee:	1c78      	adds	r0, r7, #1
 80042f0:	d1d6      	bne.n	80042a0 <_vfiprintf_r+0x1bc>
 80042f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042f4:	07d9      	lsls	r1, r3, #31
 80042f6:	d405      	bmi.n	8004304 <_vfiprintf_r+0x220>
 80042f8:	89ab      	ldrh	r3, [r5, #12]
 80042fa:	059a      	lsls	r2, r3, #22
 80042fc:	d402      	bmi.n	8004304 <_vfiprintf_r+0x220>
 80042fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004300:	f7ff fd30 	bl	8003d64 <__retarget_lock_release_recursive>
 8004304:	89ab      	ldrh	r3, [r5, #12]
 8004306:	065b      	lsls	r3, r3, #25
 8004308:	f53f af12 	bmi.w	8004130 <_vfiprintf_r+0x4c>
 800430c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800430e:	e711      	b.n	8004134 <_vfiprintf_r+0x50>
 8004310:	ab03      	add	r3, sp, #12
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	462a      	mov	r2, r5
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <_vfiprintf_r+0x258>)
 8004318:	a904      	add	r1, sp, #16
 800431a:	4630      	mov	r0, r6
 800431c:	f000 f880 	bl	8004420 <_printf_i>
 8004320:	e7e4      	b.n	80042ec <_vfiprintf_r+0x208>
 8004322:	bf00      	nop
 8004324:	08004a30 	.word	0x08004a30
 8004328:	08004a50 	.word	0x08004a50
 800432c:	08004a10 	.word	0x08004a10
 8004330:	08004a74 	.word	0x08004a74
 8004334:	08004a7e 	.word	0x08004a7e
 8004338:	00000000 	.word	0x00000000
 800433c:	080040bf 	.word	0x080040bf
 8004340:	08004a7a 	.word	0x08004a7a

08004344 <_printf_common>:
 8004344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004348:	4616      	mov	r6, r2
 800434a:	4699      	mov	r9, r3
 800434c:	688a      	ldr	r2, [r1, #8]
 800434e:	690b      	ldr	r3, [r1, #16]
 8004350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004354:	4293      	cmp	r3, r2
 8004356:	bfb8      	it	lt
 8004358:	4613      	movlt	r3, r2
 800435a:	6033      	str	r3, [r6, #0]
 800435c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004360:	4607      	mov	r7, r0
 8004362:	460c      	mov	r4, r1
 8004364:	b10a      	cbz	r2, 800436a <_printf_common+0x26>
 8004366:	3301      	adds	r3, #1
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	0699      	lsls	r1, r3, #26
 800436e:	bf42      	ittt	mi
 8004370:	6833      	ldrmi	r3, [r6, #0]
 8004372:	3302      	addmi	r3, #2
 8004374:	6033      	strmi	r3, [r6, #0]
 8004376:	6825      	ldr	r5, [r4, #0]
 8004378:	f015 0506 	ands.w	r5, r5, #6
 800437c:	d106      	bne.n	800438c <_printf_common+0x48>
 800437e:	f104 0a19 	add.w	sl, r4, #25
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	6832      	ldr	r2, [r6, #0]
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	42ab      	cmp	r3, r5
 800438a:	dc26      	bgt.n	80043da <_printf_common+0x96>
 800438c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004390:	1e13      	subs	r3, r2, #0
 8004392:	6822      	ldr	r2, [r4, #0]
 8004394:	bf18      	it	ne
 8004396:	2301      	movne	r3, #1
 8004398:	0692      	lsls	r2, r2, #26
 800439a:	d42b      	bmi.n	80043f4 <_printf_common+0xb0>
 800439c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043a0:	4649      	mov	r1, r9
 80043a2:	4638      	mov	r0, r7
 80043a4:	47c0      	blx	r8
 80043a6:	3001      	adds	r0, #1
 80043a8:	d01e      	beq.n	80043e8 <_printf_common+0xa4>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	68e5      	ldr	r5, [r4, #12]
 80043ae:	6832      	ldr	r2, [r6, #0]
 80043b0:	f003 0306 	and.w	r3, r3, #6
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	bf08      	it	eq
 80043b8:	1aad      	subeq	r5, r5, r2
 80043ba:	68a3      	ldr	r3, [r4, #8]
 80043bc:	6922      	ldr	r2, [r4, #16]
 80043be:	bf0c      	ite	eq
 80043c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043c4:	2500      	movne	r5, #0
 80043c6:	4293      	cmp	r3, r2
 80043c8:	bfc4      	itt	gt
 80043ca:	1a9b      	subgt	r3, r3, r2
 80043cc:	18ed      	addgt	r5, r5, r3
 80043ce:	2600      	movs	r6, #0
 80043d0:	341a      	adds	r4, #26
 80043d2:	42b5      	cmp	r5, r6
 80043d4:	d11a      	bne.n	800440c <_printf_common+0xc8>
 80043d6:	2000      	movs	r0, #0
 80043d8:	e008      	b.n	80043ec <_printf_common+0xa8>
 80043da:	2301      	movs	r3, #1
 80043dc:	4652      	mov	r2, sl
 80043de:	4649      	mov	r1, r9
 80043e0:	4638      	mov	r0, r7
 80043e2:	47c0      	blx	r8
 80043e4:	3001      	adds	r0, #1
 80043e6:	d103      	bne.n	80043f0 <_printf_common+0xac>
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f0:	3501      	adds	r5, #1
 80043f2:	e7c6      	b.n	8004382 <_printf_common+0x3e>
 80043f4:	18e1      	adds	r1, r4, r3
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	2030      	movs	r0, #48	; 0x30
 80043fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043fe:	4422      	add	r2, r4
 8004400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004408:	3302      	adds	r3, #2
 800440a:	e7c7      	b.n	800439c <_printf_common+0x58>
 800440c:	2301      	movs	r3, #1
 800440e:	4622      	mov	r2, r4
 8004410:	4649      	mov	r1, r9
 8004412:	4638      	mov	r0, r7
 8004414:	47c0      	blx	r8
 8004416:	3001      	adds	r0, #1
 8004418:	d0e6      	beq.n	80043e8 <_printf_common+0xa4>
 800441a:	3601      	adds	r6, #1
 800441c:	e7d9      	b.n	80043d2 <_printf_common+0x8e>
	...

08004420 <_printf_i>:
 8004420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004424:	7e0f      	ldrb	r7, [r1, #24]
 8004426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004428:	2f78      	cmp	r7, #120	; 0x78
 800442a:	4691      	mov	r9, r2
 800442c:	4680      	mov	r8, r0
 800442e:	460c      	mov	r4, r1
 8004430:	469a      	mov	sl, r3
 8004432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004436:	d807      	bhi.n	8004448 <_printf_i+0x28>
 8004438:	2f62      	cmp	r7, #98	; 0x62
 800443a:	d80a      	bhi.n	8004452 <_printf_i+0x32>
 800443c:	2f00      	cmp	r7, #0
 800443e:	f000 80d8 	beq.w	80045f2 <_printf_i+0x1d2>
 8004442:	2f58      	cmp	r7, #88	; 0x58
 8004444:	f000 80a3 	beq.w	800458e <_printf_i+0x16e>
 8004448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800444c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004450:	e03a      	b.n	80044c8 <_printf_i+0xa8>
 8004452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004456:	2b15      	cmp	r3, #21
 8004458:	d8f6      	bhi.n	8004448 <_printf_i+0x28>
 800445a:	a101      	add	r1, pc, #4	; (adr r1, 8004460 <_printf_i+0x40>)
 800445c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004460:	080044b9 	.word	0x080044b9
 8004464:	080044cd 	.word	0x080044cd
 8004468:	08004449 	.word	0x08004449
 800446c:	08004449 	.word	0x08004449
 8004470:	08004449 	.word	0x08004449
 8004474:	08004449 	.word	0x08004449
 8004478:	080044cd 	.word	0x080044cd
 800447c:	08004449 	.word	0x08004449
 8004480:	08004449 	.word	0x08004449
 8004484:	08004449 	.word	0x08004449
 8004488:	08004449 	.word	0x08004449
 800448c:	080045d9 	.word	0x080045d9
 8004490:	080044fd 	.word	0x080044fd
 8004494:	080045bb 	.word	0x080045bb
 8004498:	08004449 	.word	0x08004449
 800449c:	08004449 	.word	0x08004449
 80044a0:	080045fb 	.word	0x080045fb
 80044a4:	08004449 	.word	0x08004449
 80044a8:	080044fd 	.word	0x080044fd
 80044ac:	08004449 	.word	0x08004449
 80044b0:	08004449 	.word	0x08004449
 80044b4:	080045c3 	.word	0x080045c3
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	1d1a      	adds	r2, r3, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	602a      	str	r2, [r5, #0]
 80044c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0a3      	b.n	8004614 <_printf_i+0x1f4>
 80044cc:	6820      	ldr	r0, [r4, #0]
 80044ce:	6829      	ldr	r1, [r5, #0]
 80044d0:	0606      	lsls	r6, r0, #24
 80044d2:	f101 0304 	add.w	r3, r1, #4
 80044d6:	d50a      	bpl.n	80044ee <_printf_i+0xce>
 80044d8:	680e      	ldr	r6, [r1, #0]
 80044da:	602b      	str	r3, [r5, #0]
 80044dc:	2e00      	cmp	r6, #0
 80044de:	da03      	bge.n	80044e8 <_printf_i+0xc8>
 80044e0:	232d      	movs	r3, #45	; 0x2d
 80044e2:	4276      	negs	r6, r6
 80044e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e8:	485e      	ldr	r0, [pc, #376]	; (8004664 <_printf_i+0x244>)
 80044ea:	230a      	movs	r3, #10
 80044ec:	e019      	b.n	8004522 <_printf_i+0x102>
 80044ee:	680e      	ldr	r6, [r1, #0]
 80044f0:	602b      	str	r3, [r5, #0]
 80044f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044f6:	bf18      	it	ne
 80044f8:	b236      	sxthne	r6, r6
 80044fa:	e7ef      	b.n	80044dc <_printf_i+0xbc>
 80044fc:	682b      	ldr	r3, [r5, #0]
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	1d19      	adds	r1, r3, #4
 8004502:	6029      	str	r1, [r5, #0]
 8004504:	0601      	lsls	r1, r0, #24
 8004506:	d501      	bpl.n	800450c <_printf_i+0xec>
 8004508:	681e      	ldr	r6, [r3, #0]
 800450a:	e002      	b.n	8004512 <_printf_i+0xf2>
 800450c:	0646      	lsls	r6, r0, #25
 800450e:	d5fb      	bpl.n	8004508 <_printf_i+0xe8>
 8004510:	881e      	ldrh	r6, [r3, #0]
 8004512:	4854      	ldr	r0, [pc, #336]	; (8004664 <_printf_i+0x244>)
 8004514:	2f6f      	cmp	r7, #111	; 0x6f
 8004516:	bf0c      	ite	eq
 8004518:	2308      	moveq	r3, #8
 800451a:	230a      	movne	r3, #10
 800451c:	2100      	movs	r1, #0
 800451e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004522:	6865      	ldr	r5, [r4, #4]
 8004524:	60a5      	str	r5, [r4, #8]
 8004526:	2d00      	cmp	r5, #0
 8004528:	bfa2      	ittt	ge
 800452a:	6821      	ldrge	r1, [r4, #0]
 800452c:	f021 0104 	bicge.w	r1, r1, #4
 8004530:	6021      	strge	r1, [r4, #0]
 8004532:	b90e      	cbnz	r6, 8004538 <_printf_i+0x118>
 8004534:	2d00      	cmp	r5, #0
 8004536:	d04d      	beq.n	80045d4 <_printf_i+0x1b4>
 8004538:	4615      	mov	r5, r2
 800453a:	fbb6 f1f3 	udiv	r1, r6, r3
 800453e:	fb03 6711 	mls	r7, r3, r1, r6
 8004542:	5dc7      	ldrb	r7, [r0, r7]
 8004544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004548:	4637      	mov	r7, r6
 800454a:	42bb      	cmp	r3, r7
 800454c:	460e      	mov	r6, r1
 800454e:	d9f4      	bls.n	800453a <_printf_i+0x11a>
 8004550:	2b08      	cmp	r3, #8
 8004552:	d10b      	bne.n	800456c <_printf_i+0x14c>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	07de      	lsls	r6, r3, #31
 8004558:	d508      	bpl.n	800456c <_printf_i+0x14c>
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	6861      	ldr	r1, [r4, #4]
 800455e:	4299      	cmp	r1, r3
 8004560:	bfde      	ittt	le
 8004562:	2330      	movle	r3, #48	; 0x30
 8004564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004568:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800456c:	1b52      	subs	r2, r2, r5
 800456e:	6122      	str	r2, [r4, #16]
 8004570:	f8cd a000 	str.w	sl, [sp]
 8004574:	464b      	mov	r3, r9
 8004576:	aa03      	add	r2, sp, #12
 8004578:	4621      	mov	r1, r4
 800457a:	4640      	mov	r0, r8
 800457c:	f7ff fee2 	bl	8004344 <_printf_common>
 8004580:	3001      	adds	r0, #1
 8004582:	d14c      	bne.n	800461e <_printf_i+0x1fe>
 8004584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004588:	b004      	add	sp, #16
 800458a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458e:	4835      	ldr	r0, [pc, #212]	; (8004664 <_printf_i+0x244>)
 8004590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004594:	6829      	ldr	r1, [r5, #0]
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	f851 6b04 	ldr.w	r6, [r1], #4
 800459c:	6029      	str	r1, [r5, #0]
 800459e:	061d      	lsls	r5, r3, #24
 80045a0:	d514      	bpl.n	80045cc <_printf_i+0x1ac>
 80045a2:	07df      	lsls	r7, r3, #31
 80045a4:	bf44      	itt	mi
 80045a6:	f043 0320 	orrmi.w	r3, r3, #32
 80045aa:	6023      	strmi	r3, [r4, #0]
 80045ac:	b91e      	cbnz	r6, 80045b6 <_printf_i+0x196>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	f023 0320 	bic.w	r3, r3, #32
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	2310      	movs	r3, #16
 80045b8:	e7b0      	b.n	800451c <_printf_i+0xfc>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f043 0320 	orr.w	r3, r3, #32
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	2378      	movs	r3, #120	; 0x78
 80045c4:	4828      	ldr	r0, [pc, #160]	; (8004668 <_printf_i+0x248>)
 80045c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045ca:	e7e3      	b.n	8004594 <_printf_i+0x174>
 80045cc:	0659      	lsls	r1, r3, #25
 80045ce:	bf48      	it	mi
 80045d0:	b2b6      	uxthmi	r6, r6
 80045d2:	e7e6      	b.n	80045a2 <_printf_i+0x182>
 80045d4:	4615      	mov	r5, r2
 80045d6:	e7bb      	b.n	8004550 <_printf_i+0x130>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	6826      	ldr	r6, [r4, #0]
 80045dc:	6961      	ldr	r1, [r4, #20]
 80045de:	1d18      	adds	r0, r3, #4
 80045e0:	6028      	str	r0, [r5, #0]
 80045e2:	0635      	lsls	r5, r6, #24
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	d501      	bpl.n	80045ec <_printf_i+0x1cc>
 80045e8:	6019      	str	r1, [r3, #0]
 80045ea:	e002      	b.n	80045f2 <_printf_i+0x1d2>
 80045ec:	0670      	lsls	r0, r6, #25
 80045ee:	d5fb      	bpl.n	80045e8 <_printf_i+0x1c8>
 80045f0:	8019      	strh	r1, [r3, #0]
 80045f2:	2300      	movs	r3, #0
 80045f4:	6123      	str	r3, [r4, #16]
 80045f6:	4615      	mov	r5, r2
 80045f8:	e7ba      	b.n	8004570 <_printf_i+0x150>
 80045fa:	682b      	ldr	r3, [r5, #0]
 80045fc:	1d1a      	adds	r2, r3, #4
 80045fe:	602a      	str	r2, [r5, #0]
 8004600:	681d      	ldr	r5, [r3, #0]
 8004602:	6862      	ldr	r2, [r4, #4]
 8004604:	2100      	movs	r1, #0
 8004606:	4628      	mov	r0, r5
 8004608:	f7fb fea2 	bl	8000350 <memchr>
 800460c:	b108      	cbz	r0, 8004612 <_printf_i+0x1f2>
 800460e:	1b40      	subs	r0, r0, r5
 8004610:	6060      	str	r0, [r4, #4]
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	6123      	str	r3, [r4, #16]
 8004616:	2300      	movs	r3, #0
 8004618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800461c:	e7a8      	b.n	8004570 <_printf_i+0x150>
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	462a      	mov	r2, r5
 8004622:	4649      	mov	r1, r9
 8004624:	4640      	mov	r0, r8
 8004626:	47d0      	blx	sl
 8004628:	3001      	adds	r0, #1
 800462a:	d0ab      	beq.n	8004584 <_printf_i+0x164>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	079b      	lsls	r3, r3, #30
 8004630:	d413      	bmi.n	800465a <_printf_i+0x23a>
 8004632:	68e0      	ldr	r0, [r4, #12]
 8004634:	9b03      	ldr	r3, [sp, #12]
 8004636:	4298      	cmp	r0, r3
 8004638:	bfb8      	it	lt
 800463a:	4618      	movlt	r0, r3
 800463c:	e7a4      	b.n	8004588 <_printf_i+0x168>
 800463e:	2301      	movs	r3, #1
 8004640:	4632      	mov	r2, r6
 8004642:	4649      	mov	r1, r9
 8004644:	4640      	mov	r0, r8
 8004646:	47d0      	blx	sl
 8004648:	3001      	adds	r0, #1
 800464a:	d09b      	beq.n	8004584 <_printf_i+0x164>
 800464c:	3501      	adds	r5, #1
 800464e:	68e3      	ldr	r3, [r4, #12]
 8004650:	9903      	ldr	r1, [sp, #12]
 8004652:	1a5b      	subs	r3, r3, r1
 8004654:	42ab      	cmp	r3, r5
 8004656:	dcf2      	bgt.n	800463e <_printf_i+0x21e>
 8004658:	e7eb      	b.n	8004632 <_printf_i+0x212>
 800465a:	2500      	movs	r5, #0
 800465c:	f104 0619 	add.w	r6, r4, #25
 8004660:	e7f5      	b.n	800464e <_printf_i+0x22e>
 8004662:	bf00      	nop
 8004664:	08004a85 	.word	0x08004a85
 8004668:	08004a96 	.word	0x08004a96

0800466c <_read_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4d07      	ldr	r5, [pc, #28]	; (800468c <_read_r+0x20>)
 8004670:	4604      	mov	r4, r0
 8004672:	4608      	mov	r0, r1
 8004674:	4611      	mov	r1, r2
 8004676:	2200      	movs	r2, #0
 8004678:	602a      	str	r2, [r5, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	f7fc fdcd 	bl	800121a <_read>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d102      	bne.n	800468a <_read_r+0x1e>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	b103      	cbz	r3, 800468a <_read_r+0x1e>
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	bd38      	pop	{r3, r4, r5, pc}
 800468c:	20000820 	.word	0x20000820

08004690 <__swbuf_r>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	460e      	mov	r6, r1
 8004694:	4614      	mov	r4, r2
 8004696:	4605      	mov	r5, r0
 8004698:	b118      	cbz	r0, 80046a2 <__swbuf_r+0x12>
 800469a:	6983      	ldr	r3, [r0, #24]
 800469c:	b90b      	cbnz	r3, 80046a2 <__swbuf_r+0x12>
 800469e:	f7ff fa9d 	bl	8003bdc <__sinit>
 80046a2:	4b21      	ldr	r3, [pc, #132]	; (8004728 <__swbuf_r+0x98>)
 80046a4:	429c      	cmp	r4, r3
 80046a6:	d12b      	bne.n	8004700 <__swbuf_r+0x70>
 80046a8:	686c      	ldr	r4, [r5, #4]
 80046aa:	69a3      	ldr	r3, [r4, #24]
 80046ac:	60a3      	str	r3, [r4, #8]
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	071a      	lsls	r2, r3, #28
 80046b2:	d52f      	bpl.n	8004714 <__swbuf_r+0x84>
 80046b4:	6923      	ldr	r3, [r4, #16]
 80046b6:	b36b      	cbz	r3, 8004714 <__swbuf_r+0x84>
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	6820      	ldr	r0, [r4, #0]
 80046bc:	1ac0      	subs	r0, r0, r3
 80046be:	6963      	ldr	r3, [r4, #20]
 80046c0:	b2f6      	uxtb	r6, r6
 80046c2:	4283      	cmp	r3, r0
 80046c4:	4637      	mov	r7, r6
 80046c6:	dc04      	bgt.n	80046d2 <__swbuf_r+0x42>
 80046c8:	4621      	mov	r1, r4
 80046ca:	4628      	mov	r0, r5
 80046cc:	f7ff f9e0 	bl	8003a90 <_fflush_r>
 80046d0:	bb30      	cbnz	r0, 8004720 <__swbuf_r+0x90>
 80046d2:	68a3      	ldr	r3, [r4, #8]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	60a3      	str	r3, [r4, #8]
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	6022      	str	r2, [r4, #0]
 80046de:	701e      	strb	r6, [r3, #0]
 80046e0:	6963      	ldr	r3, [r4, #20]
 80046e2:	3001      	adds	r0, #1
 80046e4:	4283      	cmp	r3, r0
 80046e6:	d004      	beq.n	80046f2 <__swbuf_r+0x62>
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	07db      	lsls	r3, r3, #31
 80046ec:	d506      	bpl.n	80046fc <__swbuf_r+0x6c>
 80046ee:	2e0a      	cmp	r6, #10
 80046f0:	d104      	bne.n	80046fc <__swbuf_r+0x6c>
 80046f2:	4621      	mov	r1, r4
 80046f4:	4628      	mov	r0, r5
 80046f6:	f7ff f9cb 	bl	8003a90 <_fflush_r>
 80046fa:	b988      	cbnz	r0, 8004720 <__swbuf_r+0x90>
 80046fc:	4638      	mov	r0, r7
 80046fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <__swbuf_r+0x9c>)
 8004702:	429c      	cmp	r4, r3
 8004704:	d101      	bne.n	800470a <__swbuf_r+0x7a>
 8004706:	68ac      	ldr	r4, [r5, #8]
 8004708:	e7cf      	b.n	80046aa <__swbuf_r+0x1a>
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <__swbuf_r+0xa0>)
 800470c:	429c      	cmp	r4, r3
 800470e:	bf08      	it	eq
 8004710:	68ec      	ldreq	r4, [r5, #12]
 8004712:	e7ca      	b.n	80046aa <__swbuf_r+0x1a>
 8004714:	4621      	mov	r1, r4
 8004716:	4628      	mov	r0, r5
 8004718:	f000 f80c 	bl	8004734 <__swsetup_r>
 800471c:	2800      	cmp	r0, #0
 800471e:	d0cb      	beq.n	80046b8 <__swbuf_r+0x28>
 8004720:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004724:	e7ea      	b.n	80046fc <__swbuf_r+0x6c>
 8004726:	bf00      	nop
 8004728:	08004a30 	.word	0x08004a30
 800472c:	08004a50 	.word	0x08004a50
 8004730:	08004a10 	.word	0x08004a10

08004734 <__swsetup_r>:
 8004734:	4b32      	ldr	r3, [pc, #200]	; (8004800 <__swsetup_r+0xcc>)
 8004736:	b570      	push	{r4, r5, r6, lr}
 8004738:	681d      	ldr	r5, [r3, #0]
 800473a:	4606      	mov	r6, r0
 800473c:	460c      	mov	r4, r1
 800473e:	b125      	cbz	r5, 800474a <__swsetup_r+0x16>
 8004740:	69ab      	ldr	r3, [r5, #24]
 8004742:	b913      	cbnz	r3, 800474a <__swsetup_r+0x16>
 8004744:	4628      	mov	r0, r5
 8004746:	f7ff fa49 	bl	8003bdc <__sinit>
 800474a:	4b2e      	ldr	r3, [pc, #184]	; (8004804 <__swsetup_r+0xd0>)
 800474c:	429c      	cmp	r4, r3
 800474e:	d10f      	bne.n	8004770 <__swsetup_r+0x3c>
 8004750:	686c      	ldr	r4, [r5, #4]
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004758:	0719      	lsls	r1, r3, #28
 800475a:	d42c      	bmi.n	80047b6 <__swsetup_r+0x82>
 800475c:	06dd      	lsls	r5, r3, #27
 800475e:	d411      	bmi.n	8004784 <__swsetup_r+0x50>
 8004760:	2309      	movs	r3, #9
 8004762:	6033      	str	r3, [r6, #0]
 8004764:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004768:	81a3      	strh	r3, [r4, #12]
 800476a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800476e:	e03e      	b.n	80047ee <__swsetup_r+0xba>
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <__swsetup_r+0xd4>)
 8004772:	429c      	cmp	r4, r3
 8004774:	d101      	bne.n	800477a <__swsetup_r+0x46>
 8004776:	68ac      	ldr	r4, [r5, #8]
 8004778:	e7eb      	b.n	8004752 <__swsetup_r+0x1e>
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <__swsetup_r+0xd8>)
 800477c:	429c      	cmp	r4, r3
 800477e:	bf08      	it	eq
 8004780:	68ec      	ldreq	r4, [r5, #12]
 8004782:	e7e6      	b.n	8004752 <__swsetup_r+0x1e>
 8004784:	0758      	lsls	r0, r3, #29
 8004786:	d512      	bpl.n	80047ae <__swsetup_r+0x7a>
 8004788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800478a:	b141      	cbz	r1, 800479e <__swsetup_r+0x6a>
 800478c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004790:	4299      	cmp	r1, r3
 8004792:	d002      	beq.n	800479a <__swsetup_r+0x66>
 8004794:	4630      	mov	r0, r6
 8004796:	f7ff faef 	bl	8003d78 <_free_r>
 800479a:	2300      	movs	r3, #0
 800479c:	6363      	str	r3, [r4, #52]	; 0x34
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047a4:	81a3      	strh	r3, [r4, #12]
 80047a6:	2300      	movs	r3, #0
 80047a8:	6063      	str	r3, [r4, #4]
 80047aa:	6923      	ldr	r3, [r4, #16]
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	89a3      	ldrh	r3, [r4, #12]
 80047b0:	f043 0308 	orr.w	r3, r3, #8
 80047b4:	81a3      	strh	r3, [r4, #12]
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	b94b      	cbnz	r3, 80047ce <__swsetup_r+0x9a>
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c4:	d003      	beq.n	80047ce <__swsetup_r+0x9a>
 80047c6:	4621      	mov	r1, r4
 80047c8:	4630      	mov	r0, r6
 80047ca:	f000 f847 	bl	800485c <__smakebuf_r>
 80047ce:	89a0      	ldrh	r0, [r4, #12]
 80047d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047d4:	f010 0301 	ands.w	r3, r0, #1
 80047d8:	d00a      	beq.n	80047f0 <__swsetup_r+0xbc>
 80047da:	2300      	movs	r3, #0
 80047dc:	60a3      	str	r3, [r4, #8]
 80047de:	6963      	ldr	r3, [r4, #20]
 80047e0:	425b      	negs	r3, r3
 80047e2:	61a3      	str	r3, [r4, #24]
 80047e4:	6923      	ldr	r3, [r4, #16]
 80047e6:	b943      	cbnz	r3, 80047fa <__swsetup_r+0xc6>
 80047e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047ec:	d1ba      	bne.n	8004764 <__swsetup_r+0x30>
 80047ee:	bd70      	pop	{r4, r5, r6, pc}
 80047f0:	0781      	lsls	r1, r0, #30
 80047f2:	bf58      	it	pl
 80047f4:	6963      	ldrpl	r3, [r4, #20]
 80047f6:	60a3      	str	r3, [r4, #8]
 80047f8:	e7f4      	b.n	80047e4 <__swsetup_r+0xb0>
 80047fa:	2000      	movs	r0, #0
 80047fc:	e7f7      	b.n	80047ee <__swsetup_r+0xba>
 80047fe:	bf00      	nop
 8004800:	2000000c 	.word	0x2000000c
 8004804:	08004a30 	.word	0x08004a30
 8004808:	08004a50 	.word	0x08004a50
 800480c:	08004a10 	.word	0x08004a10

08004810 <__swhatbuf_r>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	460e      	mov	r6, r1
 8004814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004818:	2900      	cmp	r1, #0
 800481a:	b096      	sub	sp, #88	; 0x58
 800481c:	4614      	mov	r4, r2
 800481e:	461d      	mov	r5, r3
 8004820:	da08      	bge.n	8004834 <__swhatbuf_r+0x24>
 8004822:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	602a      	str	r2, [r5, #0]
 800482a:	061a      	lsls	r2, r3, #24
 800482c:	d410      	bmi.n	8004850 <__swhatbuf_r+0x40>
 800482e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004832:	e00e      	b.n	8004852 <__swhatbuf_r+0x42>
 8004834:	466a      	mov	r2, sp
 8004836:	f000 f851 	bl	80048dc <_fstat_r>
 800483a:	2800      	cmp	r0, #0
 800483c:	dbf1      	blt.n	8004822 <__swhatbuf_r+0x12>
 800483e:	9a01      	ldr	r2, [sp, #4]
 8004840:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004844:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004848:	425a      	negs	r2, r3
 800484a:	415a      	adcs	r2, r3
 800484c:	602a      	str	r2, [r5, #0]
 800484e:	e7ee      	b.n	800482e <__swhatbuf_r+0x1e>
 8004850:	2340      	movs	r3, #64	; 0x40
 8004852:	2000      	movs	r0, #0
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	b016      	add	sp, #88	; 0x58
 8004858:	bd70      	pop	{r4, r5, r6, pc}
	...

0800485c <__smakebuf_r>:
 800485c:	898b      	ldrh	r3, [r1, #12]
 800485e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004860:	079d      	lsls	r5, r3, #30
 8004862:	4606      	mov	r6, r0
 8004864:	460c      	mov	r4, r1
 8004866:	d507      	bpl.n	8004878 <__smakebuf_r+0x1c>
 8004868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	6123      	str	r3, [r4, #16]
 8004870:	2301      	movs	r3, #1
 8004872:	6163      	str	r3, [r4, #20]
 8004874:	b002      	add	sp, #8
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	ab01      	add	r3, sp, #4
 800487a:	466a      	mov	r2, sp
 800487c:	f7ff ffc8 	bl	8004810 <__swhatbuf_r>
 8004880:	9900      	ldr	r1, [sp, #0]
 8004882:	4605      	mov	r5, r0
 8004884:	4630      	mov	r0, r6
 8004886:	f7ff fae3 	bl	8003e50 <_malloc_r>
 800488a:	b948      	cbnz	r0, 80048a0 <__smakebuf_r+0x44>
 800488c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004890:	059a      	lsls	r2, r3, #22
 8004892:	d4ef      	bmi.n	8004874 <__smakebuf_r+0x18>
 8004894:	f023 0303 	bic.w	r3, r3, #3
 8004898:	f043 0302 	orr.w	r3, r3, #2
 800489c:	81a3      	strh	r3, [r4, #12]
 800489e:	e7e3      	b.n	8004868 <__smakebuf_r+0xc>
 80048a0:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <__smakebuf_r+0x7c>)
 80048a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	6020      	str	r0, [r4, #0]
 80048a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ac:	81a3      	strh	r3, [r4, #12]
 80048ae:	9b00      	ldr	r3, [sp, #0]
 80048b0:	6163      	str	r3, [r4, #20]
 80048b2:	9b01      	ldr	r3, [sp, #4]
 80048b4:	6120      	str	r0, [r4, #16]
 80048b6:	b15b      	cbz	r3, 80048d0 <__smakebuf_r+0x74>
 80048b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048bc:	4630      	mov	r0, r6
 80048be:	f000 f81f 	bl	8004900 <_isatty_r>
 80048c2:	b128      	cbz	r0, 80048d0 <__smakebuf_r+0x74>
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	81a3      	strh	r3, [r4, #12]
 80048d0:	89a0      	ldrh	r0, [r4, #12]
 80048d2:	4305      	orrs	r5, r0
 80048d4:	81a5      	strh	r5, [r4, #12]
 80048d6:	e7cd      	b.n	8004874 <__smakebuf_r+0x18>
 80048d8:	08003b75 	.word	0x08003b75

080048dc <_fstat_r>:
 80048dc:	b538      	push	{r3, r4, r5, lr}
 80048de:	4d07      	ldr	r5, [pc, #28]	; (80048fc <_fstat_r+0x20>)
 80048e0:	2300      	movs	r3, #0
 80048e2:	4604      	mov	r4, r0
 80048e4:	4608      	mov	r0, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	602b      	str	r3, [r5, #0]
 80048ea:	f7fc fcdb 	bl	80012a4 <_fstat>
 80048ee:	1c43      	adds	r3, r0, #1
 80048f0:	d102      	bne.n	80048f8 <_fstat_r+0x1c>
 80048f2:	682b      	ldr	r3, [r5, #0]
 80048f4:	b103      	cbz	r3, 80048f8 <_fstat_r+0x1c>
 80048f6:	6023      	str	r3, [r4, #0]
 80048f8:	bd38      	pop	{r3, r4, r5, pc}
 80048fa:	bf00      	nop
 80048fc:	20000820 	.word	0x20000820

08004900 <_isatty_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	4d06      	ldr	r5, [pc, #24]	; (800491c <_isatty_r+0x1c>)
 8004904:	2300      	movs	r3, #0
 8004906:	4604      	mov	r4, r0
 8004908:	4608      	mov	r0, r1
 800490a:	602b      	str	r3, [r5, #0]
 800490c:	f7fc fcda 	bl	80012c4 <_isatty>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_isatty_r+0x1a>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_isatty_r+0x1a>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	20000820 	.word	0x20000820

08004920 <_init>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	bf00      	nop
 8004924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004926:	bc08      	pop	{r3}
 8004928:	469e      	mov	lr, r3
 800492a:	4770      	bx	lr

0800492c <_fini>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	bf00      	nop
 8004930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004932:	bc08      	pop	{r3}
 8004934:	469e      	mov	lr, r3
 8004936:	4770      	bx	lr
